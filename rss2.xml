<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Juryeon Blog</title>
    <link>http://hanjuren.github.io/</link>
    
    <atom:link href="http://hanjuren.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 19 Jun 2022 10:58:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>express-serverless 구축(2)</title>
      <link>http://hanjuren.github.io/2022/06/15/express-serverless-%EA%B5%AC%EC%B6%95-2/</link>
      <guid>http://hanjuren.github.io/2022/06/15/express-serverless-%EA%B5%AC%EC%B6%95-2/</guid>
      <pubDate>Wed, 15 Jun 2022 01:49:11 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;aws-express-serverless&lt;/strong&gt; 를 통해 express 를 통해 구축한 간단한 api 서버를 &lt;strong&gt;API Gateway&lt;/strong&gt; 와 &lt;strong&gt;Lmabda&lt;/strong&gt;를 이용하여 배포해 보았다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;를 통해 &lt;strong&gt;Lambda&lt;/strong&gt; 함수를 실행하기 위해서는 &lt;strong&gt;API Gateway&lt;/strong&gt;에서 생성된 URL로 요청을 보내야한다. 요청을 보내기 위한 URL은 aws 콘솔 - API Gateway - API - Stage 창에서 확인이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;URL-정보&quot;&gt;&lt;a href=&quot;#URL-정보&quot; class=&quot;headerlink&quot; title=&quot;URL 정보.&quot;&gt;&lt;/a&gt;URL 정보.&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/url_info.png&quot; title=&quot;URL 정보&quot;&gt;&lt;br&gt;url 구조는 https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage}와 같이 구성된 url로 요청을 보내면 &lt;strong&gt;Lambda&lt;/strong&gt;에 배포한 함수가 실행되며 응답을 해준다.  &lt;/p&gt;
&lt;p&gt;하지만 이렇게 길고 불편한 URL을 매번 기억하고 요청하기에는 어려움이 있다.&lt;/p&gt;
&lt;p&gt;요청을 보내고 싶은 URL은 https://{domain}/api/v1/lambda/{proxy}의 구조를 가진 URL이다. &lt;strong&gt;API Gateway&lt;/strong&gt;에서 생성해준 URL이 아닌 직접 지정한 도메인으로 요청을 보내기 위해서는 커스텀 도메인을 등록하는 작업이 필요하다.  &lt;/p&gt;
&lt;p&gt;해당 작업을 진행하기 위해서는&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AWS 계정 (Lambda에 함수를 배포했으니 계정은 당연히 존재한다고 가정..)&lt;/li&gt;
&lt;li&gt;API Gateway에 연결할 도메인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 두가지만 있으면 된다. 그럼 진행해보도록 하자!!!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>aws-express-serverless</strong> 를 통해 express 를 통해 구축한 간단한 api 서버를 <strong>API Gateway</strong> 와 <strong>Lmabda</strong>를 이용하여 배포해 보았다.</p><p><strong>API Gateway</strong>를 통해 <strong>Lambda</strong> 함수를 실행하기 위해서는 <strong>API Gateway</strong>에서 생성된 URL로 요청을 보내야한다. 요청을 보내기 위한 URL은 aws 콘솔 - API Gateway - API - Stage 창에서 확인이 가능하다.</p><blockquote><h3 id="URL-정보"><a href="#URL-정보" class="headerlink" title="URL 정보."></a>URL 정보.</h3><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/url_info.png" title="URL 정보"><br>url 구조는 https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage}</p></blockquote><p>https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage}와 같이 구성된 url로 요청을 보내면 <strong>Lambda</strong>에 배포한 함수가 실행되며 응답을 해준다.  </p><p>하지만 이렇게 길고 불편한 URL을 매번 기억하고 요청하기에는 어려움이 있다.</p><p>요청을 보내고 싶은 URL은 https://{domain}/api/v1/lambda/{proxy}의 구조를 가진 URL이다. <strong>API Gateway</strong>에서 생성해준 URL이 아닌 직접 지정한 도메인으로 요청을 보내기 위해서는 커스텀 도메인을 등록하는 작업이 필요하다.  </p><p>해당 작업을 진행하기 위해서는</p><ol><li>AWS 계정 (Lambda에 함수를 배포했으니 계정은 당연히 존재한다고 가정..)</li><li>API Gateway에 연결할 도메인</li></ol><p>이렇게 두가지만 있으면 된다. 그럼 진행해보도록 하자!!!</p><span id="more"></span><p>먼저 <strong>API Gateway</strong>에 도메인을 연결하기 위해 <a href="https://jaewook.me/aws-api-gateway-with-custom-domain">Jaewook Ahn 님의 블로그</a>를 참고하여 진행하였다. 😇👍</p><h2 id="SSL-TSL-인증서-발급"><a href="#SSL-TSL-인증서-발급" class="headerlink" title="SSL/TSL 인증서 발급"></a>SSL/TSL 인증서 발급</h2><p>나의 도메인을 <strong>API Gateway</strong>에 연결하기 위해서는 도메인에 SSL/TSL 인증서를 발급 받아야한다. 인증서를 발급받기 위해서는 다양한 방법이 있지만 대부분의 블로그나 AWS 문서에서는 <strong>AWS Certificate Manager</strong>를 이용하는 것을 권장한다고 나와 있기 때문에 해당 서비스를 이용하기로 했다.</p><blockquote><p>인증서를 발급받기위한 나의 도메인 주소 <strong>juryeon.com</strong><br>도메인은 가비아를 이용하여 구입 및 Route53 서비스를 통해 등록하였다.</p></blockquote><p>구매한 도메인을 통해 인증서를 발급받고자 하는 주소는 <strong>dev.juryeon.com</strong>이다. 인증서 발급을 위해 <strong>AWS Certificate Manager</strong>로 이동 후 인증서 요청 탭을 클릭해준다.</p><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/public_click.png" title="인증서 요청1"><br><br></p><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/ssl2.png" title="인증서 요청2"></p><ul><li>인증서를 발급받고자 하는 도메인을 입력하고 필요시 태그를 입력하고 인증 방식은 DNS 검증으로 지정하고 생성 버튼을 클릭한다.<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/ssl3.png" title="인증서 요청3"></p><ul><li>생성 버튼을 클릭하게 되면 <strong>Route 53에서 레코드 생성</strong>이라는 버튼이 보이게 된다. 이 버튼이 나타나지 않는다면 레코드를 생성할 도메인에 대하여 Route 53에 정상적으로 도메인이 등록 안되어 있을 수 있으니 도메인을 등록 후 다시 실행하게 되면 버튼이 나온다.<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/ssl4.png" title="인증서 요청4"></p><ul><li>레코드 생성 버튼을 클릭하여 해당 도메인에 대한 CNAME 레코드를 추가해준다.  </li><li>레코드를 생성하고 잠시 기다리면 인증서에 대한 상태가 발급이 되었다는 상태로 변경된다.<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/ssl5.png" title="인증서 요청5"><br>보통 10분정도 기다리면 된다는데.. 주말이라 그런가? 30분 기다려서 발급해줌.. 주말이라서 그런건 아니겠지?<br><br></p><h2 id="API-Gateway-Custom-Domain-등록"><a href="#API-Gateway-Custom-Domain-등록" class="headerlink" title="API Gateway Custom Domain 등록"></a>API Gateway Custom Domain 등록</h2><p>등록하기 위한 도메인에대하여 인증서를 발급받았다면 등록해주기만 하면 된다.</p><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain.png" title="도메인 등록"></p><ul><li>생성 버튼 클릭<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain1.png" title="도메인 등록1"></p><ul><li>인증서를 발급받았던 도메인 입력 및 인증서 선택<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain2.png" title="도메인 등록2"></p><ul><li>API 매핑 구성 클릭<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain3.png" title="도메인 등록3"></p><ul><li>연결할 <strong>API Gateway</strong>와 스테이지 선택<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain4.png" title="도메인 등록4"></p><ul><li><strong>API Gateway domain name</strong> URL을 레코드에 추가해주어야한다. 해당 도메인에 대하여 CNAME 레코드를 추가해주었다.<br></li></ul><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain5.png" title="도메인 등록5"><br><br></p><p>여기까지 완료하게 되면 커스텀 도메인을 통해 <strong>API Gateway</strong>호출을 하기위한 모든 준비가 마무리 된것이다. 도메인이 활성화 되기 위해서는 약간의 시간이 필요하니 조금 기다린 후 테스트를 해보면 될것 같다.</p><h2 id="커스텀-도메인으로-요청해보기"><a href="#커스텀-도메인으로-요청해보기" class="headerlink" title="커스텀 도메인으로 요청해보기"></a>커스텀 도메인으로 요청해보기</h2><ol><li><p>기존 <strong>API Gateway URL</strong>을 통한 요청<br><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain_test1.png" title="요청 테스트1"></p><br></li><li><p>커스텀 도메인으로 요청<br><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/api-gateway-custom-domain/custom_domain_test2.png" title="요청 테스트2"></p></li></ol><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>이렇게 연결된 도메인을 통해 요청을 하게 되면 아래의 구조로 요청과 응답이 발생하게 된다.</p><ol><li><strong><a href="https://dev.juryeon.com/api/v1/lambda/%7Bproxy%7D">https://dev.juryeon.com/api/v1/lambda/{proxy}</a></strong> 호출</li><li><strong>juryeon.com</strong> cname 레코드로 요청 전달</li></ol>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/lambda/">lambda</category>
      
      <category domain="http://hanjuren.github.io/categories/aws-serverless-express/">aws-serverless-express</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/lambda/">lambda</category>
      
      <category domain="http://hanjuren.github.io/tags/aws-serverless-express/">aws-serverless-express</category>
      
      
      <comments>http://hanjuren.github.io/2022/06/15/express-serverless-%EA%B5%AC%EC%B6%95-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>express serverless 구축(1)</title>
      <link>http://hanjuren.github.io/2022/06/15/nodejs/express-serverless-%EA%B5%AC%EC%B6%95-1/</link>
      <guid>http://hanjuren.github.io/2022/06/15/nodejs/express-serverless-%EA%B5%AC%EC%B6%95-1/</guid>
      <pubDate>Wed, 15 Jun 2022 01:10:45 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;Lambda-Express-API-서버-구축하기&quot;&gt;&lt;a href=&quot;#Lambda-Express-API-서버-구축하기&quot; class=&quot;headerlink&quot; title=&quot;Lambda Express API 서버 구축하기&quot;&gt;&lt;/a&gt;Lambda Express API 서버 구축하기&lt;/h3&gt;&lt;p&gt;람다와 express 를 이용하여 API 서버를 구축해보자.&lt;/p&gt;
&lt;h4 id=&quot;프로젝트-생성&quot;&gt;&lt;a href=&quot;#프로젝트-생성&quot; class=&quot;headerlink&quot; title=&quot;- 프로젝트 생성&quot;&gt;&lt;/a&gt;- 프로젝트 생성&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;패키지-설치&quot;&gt;&lt;a href=&quot;#패키지-설치&quot; class=&quot;headerlink&quot; title=&quot;- 패키지 설치&quot;&gt;&lt;/a&gt;- 패키지 설치&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install express aws-serverless-express&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install serverless-offline -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;로컬에서도-express를-실행하며-테스트하고-배포는-람다로-하고싶다&quot;&gt;&lt;a href=&quot;#로컬에서도-express를-실행하며-테스트하고-배포는-람다로-하고싶다&quot; class=&quot;headerlink&quot; title=&quot;- 로컬에서도 express를 실행하며 테스트하고 배포는 람다로 하고싶다.&quot;&gt;&lt;/a&gt;- 로컬에서도 express를 실행하며 테스트하고 배포는 람다로 하고싶다.&lt;/h4&gt;&lt;p&gt;개발환경과 배포환경을 구분하여 개발을 진행해야한다. (나누어 진행하지 않는다면?? 매우 힘들다…)&lt;br&gt;serverless 는 serverless-offline 이라는 서비스를 지원하며 람다를 통해 배포한 환경과 동일한 환경에서 테스트를 로컬에서 실행이 가능하도록 해주는 패키지이다.&lt;/p&gt;
&lt;p&gt;그래서 난 로컬환경에서 serverless-offline 을 통해 실행함과 더불어 일반적인 express 개발 환경처럼 직접 express 를 구동할 수 있도록 설정하기로 했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="Lambda-Express-API-서버-구축하기"><a href="#Lambda-Express-API-서버-구축하기" class="headerlink" title="Lambda Express API 서버 구축하기"></a>Lambda Express API 서버 구축하기</h3><p>람다와 express 를 이용하여 API 서버를 구축해보자.</p><h4 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="- 프로젝트 생성"></a>- 프로젝트 생성</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h4 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="- 패키지 설치"></a>- 패키지 설치</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express aws-serverless-express</span><br><span class="line">npm install serverless-offline -d</span><br></pre></td></tr></table></figure><h4 id="로컬에서도-express를-실행하며-테스트하고-배포는-람다로-하고싶다"><a href="#로컬에서도-express를-실행하며-테스트하고-배포는-람다로-하고싶다" class="headerlink" title="- 로컬에서도 express를 실행하며 테스트하고 배포는 람다로 하고싶다."></a>- 로컬에서도 express를 실행하며 테스트하고 배포는 람다로 하고싶다.</h4><p>개발환경과 배포환경을 구분하여 개발을 진행해야한다. (나누어 진행하지 않는다면?? 매우 힘들다…)<br>serverless 는 serverless-offline 이라는 서비스를 지원하며 람다를 통해 배포한 환경과 동일한 환경에서 테스트를 로컬에서 실행이 가능하도록 해주는 패키지이다.</p><p>그래서 난 로컬환경에서 serverless-offline 을 통해 실행함과 더불어 일반적인 express 개발 환경처럼 직접 express 를 구동할 수 있도록 설정하기로 했다.</p><span id="more"></span><blockquote><p>app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; initialize &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./init&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">initialize(app);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/api/v1/meta&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> res.json(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><p>app.js 에서는 기본적인 express 의 구조로 작성했다.<br><br><br></p><blockquote><p>local.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`localhost:<span class="subst">$&#123;port&#125;</span> start app`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>뭐 크게 특별하지 않다. 왜냐면 회사에서 람다로 api 를 구축하기 전 테스트 단계이니까.👏👏👏<br><br><br></p><blockquote><p>lambda.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> awsServerlessExpress = <span class="built_in">require</span>(<span class="string">&#x27;aws-serverless-express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = awsServerlessExpress.createServer(app)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="function">(<span class="params">event, context</span>) =&gt;</span> &#123; awsServerlessExpress.proxy(server, event, context) &#125;</span><br></pre></td></tr></table></figure><p>lambda.js 에서는 express 를 lambda 함수로 실행할 수 있도록 하기 위해 작성한다.<br><br><br></p><hr><h4 id="serverless-yml"><a href="#serverless-yml" class="headerlink" title="- serverless.yml"></a>- serverless.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service:</span> <span class="string">express-lambda-test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">serverless-offline</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">$&#123;opt:stage,</span> <span class="string">self:provider.stage&#125;</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">$&#123;file(env.yml):$&#123;self:custom.stage&#125;,</span> <span class="string">file(env.yml):default&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">provider:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">aws</span></span><br><span class="line">  <span class="attr">runtime:</span> <span class="string">nodejs16.x</span></span><br><span class="line">  <span class="attr">memorySize:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">$&#123;opt:stage,</span> <span class="string">&#x27;dev&#x27;</span><span class="string">&#125;</span> <span class="comment"># option -s or default stage(&#x27;dev&#x27;)</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-northeast-2</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">NODE_ENV:</span> <span class="string">$&#123;self:custom.environment.NODE_ENV&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">functions:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">handler:</span> <span class="string">./src/lambda.handler</span></span><br><span class="line">    <span class="attr">events:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">method:</span> <span class="string">any</span></span><br><span class="line">          <span class="attr">cors:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">&#x27;/api/v1/&#123;proxy+&#125;&#x27;</span></span><br><span class="line">          <span class="attr">method:</span> <span class="string">any</span></span><br><span class="line">          <span class="attr">cors:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="람다-배포"><a href="#람다-배포" class="headerlink" title="- 람다 배포"></a>- 람다 배포</h4><p>람다를 통해 api 호출해서 응답을 받기 위한 준비는 끝났고 배포만 진행하면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverless deploy --stage dev</span><br></pre></td></tr></table></figure><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/express-lambda/deploy.png" title="배포"><br><br><br></p><h4 id="호출해보기"><a href="#호출해보기" class="headerlink" title="- 호출해보기"></a>- 호출해보기</h4><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/express-lambda/test.png" title="result"></p><hr><p>간단하게 알아보았으니 이제 lambda 가 어떻게 api 를 호출하는지 알아보자.</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/lambda/">lambda</category>
      
      <category domain="http://hanjuren.github.io/categories/aws-serverless-express/">aws-serverless-express</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/lambda/">lambda</category>
      
      <category domain="http://hanjuren.github.io/tags/aws-serverless-express/">aws-serverless-express</category>
      
      
      <comments>http://hanjuren.github.io/2022/06/15/nodejs/express-serverless-%EA%B5%AC%EC%B6%95-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS CLI 설정하기</title>
      <link>http://hanjuren.github.io/2022/05/24/aws/AWS-CLI-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
      <guid>http://hanjuren.github.io/2022/05/24/aws/AWS-CLI-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 24 May 2022 11:21:44 GMT</pubDate>
      
      <description>&lt;div style=&quot;display: flex; justify-content: center&quot;&gt;
    &lt;img 
        src=&quot;https://gitblog.s3.ap-northeast-2.amazonaws.com/aws-cli/aws+cli.png&quot; 
        style=&quot;width: 90%; height: 370px;&quot;
    &gt;
&lt;/div&gt;

&lt;p&gt;AWS CLI 설치 및 기본적인 세팅, 명령어에 대한 기록..&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div style="display: flex; justify-content: center">    <img         src="https://gitblog.s3.ap-northeast-2.amazonaws.com/aws-cli/aws+cli.png"         style="width: 90%; height: 370px;"    ></div><p>AWS CLI 설치 및 기본적인 세팅, 명령어에 대한 기록..</p><span id="more"></span><h2 id="1-HomeBrew를-사용하여-AWS-CLI-설치"><a href="#1-HomeBrew를-사용하여-AWS-CLI-설치" class="headerlink" title="1. HomeBrew를 사용하여 AWS-CLI 설치"></a>1. HomeBrew를 사용하여 AWS-CLI 설치</h2><p>mac os 에서는 homebrew를 이용하여 간단한 설치가 가능하다.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install aws-cli</span><br></pre></td></tr></table></figure><p>설치가 잘 되었는지 확인하기 위해서는 아래 명령어를 입력해준다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --version</span><br></pre></td></tr></table></figure><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/aws-cli/aws_install_check.png" title="aws 설치 확인"></p><hr><h2 id="2-AWS-AccessKey-SecretKey-발급받기"><a href="#2-AWS-AccessKey-SecretKey-발급받기" class="headerlink" title="2. AWS AccessKey. SecretKey 발급받기."></a>2. AWS AccessKey. SecretKey 발급받기.</h2><p>상단의 유저 계정 -&gt; 보안자격증명 클릭 -&gt; 새 액세스 키 만들기 -&gt; 키 파일 다운로드</p><p><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/aws-cli/aws-accesskey-main.PNG" title="액세스 키 발급"><br>생성된 키 파일은 다운로드하거나 복사해 보관하면된다.</p><hr><h2 id="3-AWS-CLI-Configure-설정"><a href="#3-AWS-CLI-Configure-설정" class="headerlink" title="3. AWS CLI Configure 설정"></a>3. AWS CLI Configure 설정</h2><p>aws cli를 사용하기 위해 앞서 발급한 엑세스키를 등록 해야한다. 등록을 하게되면  .aws 디렉토리 아래 congig, credentials 파일이 생성되며<br>profile 정보와 accesskey 정보들이 각각 저장된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 엑세스키와 시크릿키를 입력하고 리전을 입력해주면 된다.<br><img src="https://gitblog.s3.ap-northeast-2.amazonaws.com/aws-cli/aws-configure.PNG" title="기본 설정"></p><hr><h2 id="4-AWS-CLI-사용해보기"><a href="#4-AWS-CLI-사용해보기" class="headerlink" title="4. AWS CLI 사용해보기"></a>4. AWS CLI 사용해보기</h2><p>기본적인 명령어들을 이용하여 aws-cli</p><ol><li><p>현재 사용중인 iam 유저 정보 조회</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws sts get-caller-identity</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Account: <span class="string">&#x27;038890352489&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arn: arn:aws:iam::038890352489:root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> UserId: <span class="string">&#x27;038890352489&#x27;</span></span></span><br></pre></td></tr></table></figure></li><li><p>현재 사용중인 리전 조회</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws configure get region</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ap-northeast-2</span></span><br></pre></td></tr></table></figure></li><li><p>내 계정의 s3 버킷 리스트 조회</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws s3 ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2022-05-25 11:24:36 gitblog</span></span><br></pre></td></tr></table></figure></li><li><p>ec2 조회</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-instances</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [] 현재 가종중인 인스턴스가 없음</span></span><br></pre></td></tr></table></figure></li></ol><p>간단하게 aws-cli에서는 어떤식으로 사용하는지 알아보았으니 원하는 서비스를 이용할때마다 명령어를 잘 찾아 사용해야겠다.👍</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/aws/">aws</category>
      
      
      <category domain="http://hanjuren.github.io/tags/aws/">aws</category>
      
      
      <comments>http://hanjuren.github.io/2022/05/24/aws/AWS-CLI-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rails Console Json Data</title>
      <link>http://hanjuren.github.io/2022/05/11/ruby/Rails-Console-Json-Data/</link>
      <guid>http://hanjuren.github.io/2022/05/11/ruby/Rails-Console-Json-Data/</guid>
      <pubDate>Wed, 11 May 2022 06:33:56 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;레일스-콘솔에서-데이터-편하게-보는법&quot;&gt;&lt;a href=&quot;#레일스-콘솔에서-데이터-편하게-보는법&quot; class=&quot;headerlink&quot; title=&quot;레일스 콘솔에서 데이터 편하게 보는법.&quot;&gt;&lt;/a&gt;레일스 콘솔에서 데이터 편하게 보는법.&lt;/h3</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="레일스-콘솔에서-데이터-편하게-보는법"><a href="#레일스-콘솔에서-데이터-편하게-보는법" class="headerlink" title="레일스 콘솔에서 데이터 편하게 보는법."></a>레일스 콘솔에서 데이터 편하게 보는법.</h3><p>일단 그냥 보면 되지 굳이 명령어하나 더 치면서 데이터를 확인할까 하지만 데이터가 너무 길고 보기 힘들때 이해도 못하는 데이터 보기라도 편하게 바꿔보자 싶어서 찾아보았다.</p><p>먼저 일반적으로 보던 모습이다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;id&quot;</span>=&gt;<span class="number">321312312</span>,</span><br><span class="line">    <span class="string">&quot;product_id&quot;</span>=&gt;<span class="number">5858457321321223335</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>=&gt;<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;price&quot;</span>=&gt;<span class="string">&quot;17000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sku&quot;</span>=&gt;<span class="string">&quot;H59554J1S16C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>=&gt;<span class="number">16</span>,</span><br><span class="line">    <span class="string">&quot;inventory_policy&quot;</span>=&gt;<span class="string">&quot;deny&quot;</span>,</span><br><span class="line">    <span class="string">&quot;compare_at_price&quot;</span>=&gt;<span class="literal">nil</span>,</span><br><span class="line">    <span class="string">&quot;fulfillment_service&quot;</span>=&gt;<span class="string">&quot;manual&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inventory_management&quot;</span>=&gt;<span class="string">&quot;shopify&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option1&quot;</span>=&gt;<span class="string">&quot;brown&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option2&quot;</span>=&gt;<span class="string">&quot;-4.25&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option3&quot;</span>=&gt;<span class="literal">nil</span>,</span><br><span class="line">    <span class="string">&quot;created_at&quot;</span>=&gt;<span class="string">&quot;2020-09-28T16:44:30+09:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;updated_at&quot;</span>=&gt;<span class="string">&quot;2022-03-31T23:36:06+09:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;taxable&quot;</span>=&gt;<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;barcode&quot;</span>=&gt;<span class="string">&quot;8809693505654&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grams&quot;</span>=&gt;<span class="number">37</span>,</span><br><span class="line">    <span class="string">&quot;image_id&quot;</span>=&gt;<span class="number">20065729413287</span>,</span><br><span class="line">    <span class="string">&quot;weight&quot;</span>=&gt;<span class="number">37.0</span>,</span><br><span class="line">    <span class="string">&quot;weight_unit&quot;</span>=&gt;<span class="string">&quot;g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inventory_item_id&quot;</span>=&gt;<span class="number">38760799502503</span>,</span><br><span class="line">    <span class="string">&quot;inventory_quantity&quot;</span>=&gt;<span class="number">996</span>,</span><br><span class="line">    <span class="string">&quot;old_inventory_quantity&quot;</span>=&gt;<span class="number">996</span>,</span><br><span class="line">    <span class="string">&quot;requires_shipping&quot;</span>=&gt;<span class="literal">false</span>,</span><br><span class="line">   &#123;<span class="string">&quot;id&quot;</span>=&gt;<span class="number">36712615346343</span>,</span><br><span class="line">    <span class="string">&quot;product_id&quot;</span>=&gt;<span class="number">5858457223335</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>=&gt;<span class="string">&quot;brown / -4.50&quot;</span>,</span><br><span class="line">    <span class="string">&quot;price&quot;</span>=&gt;<span class="string">&quot;17000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sku&quot;</span>=&gt;<span class="string">&quot;H59554J1S17C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>=&gt;<span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;inventory_policy&quot;</span>=&gt;<span class="string">&quot;deny&quot;</span>,</span><br><span class="line">    <span class="string">&quot;compare_at_price&quot;</span>=&gt;<span class="literal">nil</span>,</span><br><span class="line">    <span class="string">&quot;fulfillment_service&quot;</span>=&gt;<span class="string">&quot;manual&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inventory_management&quot;</span>=&gt;<span class="string">&quot;shopify&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option1&quot;</span>=&gt;<span class="string">&quot;brown&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option2&quot;</span>=&gt;<span class="string">&quot;-4.50&quot;</span>,</span><br><span class="line">    <span class="string">&quot;option3&quot;</span>=&gt;<span class="literal">nil</span>,</span><br><span class="line">    <span class="string">&quot;created_at&quot;</span>=&gt;<span class="string">&quot;2020-09-28T16:44:30+09:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;updated_at&quot;</span>=&gt;<span class="string">&quot;2022-03-31T23:36:07+09:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;taxable&quot;</span>=&gt;<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;barcode&quot;</span>=&gt;<span class="string">&quot;8809693505661&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grams&quot;</span>=&gt;<span class="number">37</span>,</span><br><span class="line">    <span class="string">&quot;image_id&quot;</span>=&gt;<span class="number">20065729413287</span>,</span><br><span class="line">    <span class="string">&quot;weight&quot;</span>=&gt;<span class="number">37.0</span>,</span><br><span class="line">    <span class="string">&quot;weight_unit&quot;</span>=&gt;<span class="string">&quot;g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inventory_item_id&quot;</span>=&gt;<span class="number">38760799535271</span>,</span><br><span class="line">    <span class="string">&quot;inventory_quantity&quot;</span>=&gt;<span class="number">999</span>,</span><br><span class="line">    <span class="string">&quot;old_inventory_quantity&quot;</span>=&gt;<span class="number">999</span>,</span><br><span class="line">    <span class="string">&quot;requires_shipping&quot;</span>=&gt;<span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;admin_graphql_api_id&quot;</span>=&gt;<span class="string">&quot;gid://shopify/ProductVariant/36712615346343&quot;</span>,</span><br><span class="line">    <span class="string">&quot;compare_at_price2&quot;</span>=&gt;<span class="string">&quot;&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/categories/Ruby-on-Rails/">Ruby on Rails</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/tags/Ruby-on-Rails/">Ruby on Rails</category>
      
      
      <comments>http://hanjuren.github.io/2022/05/11/ruby/Rails-Console-Json-Data/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>유니코드란 무엇일까?</title>
      <link>http://hanjuren.github.io/2022/04/09/UNICODE/</link>
      <guid>http://hanjuren.github.io/2022/04/09/UNICODE/</guid>
      <pubDate>Sat, 09 Apr 2022 05:09:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;인코딩-에러&quot;&gt;&lt;a href=&quot;#인코딩-에러&quot; class=&quot;headerlink&quot; title=&quot;인코딩 에러?&quot;&gt;&lt;/a&gt;인코딩 에러?&lt;/h2&gt;&lt;p&gt;꼭 한번은 마주친다는 문제… 분명 한글로 데이터를 받았고 데이터베이스에도 한글 데이터가 잘 저</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="인코딩-에러"><a href="#인코딩-에러" class="headerlink" title="인코딩 에러?"></a>인코딩 에러?</h2><p>꼭 한번은 마주친다는 문제… 분명 한글로 데이터를 받았고 데이터베이스에도 한글 데이터가 잘 저장이 되고 있었다. 그런데?</p><p><strong>20220301-_______________________________________________________.xls</strong> 왜 한글 파일이 이렇게 저장이 되는걸까…</p><p>에러로그에는 다음과 같이 로그가 찍혀있었다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Encoding::UndefinedConversionError (&quot;\xEC&quot; from ASCII-8BIT to UTF-8):</span><br></pre></td></tr></table></figure><p>분명 나는 한글로 데이터는 들어온다. 그런데 인코딩 문제라고 한다.. 그동안 별 문제 없이 한글 데이터를 사용했는데 뭐 어쨌든 중요한건 한글이 깨진다는 것이다.</p><p>해당 문제를 살펴보니 ROR 콘솔에서 발생하지는 않지만 변수에 UTF-8이 아닌 문자를 할당할 경우 발생하는 에러라고 나왔다.</p><p>문제 해결을 위해서는 해당 파일을 읽어올때 <strong>루비에서는</strong> <em>.force_encoding(‘utf-8’).encode</em> 메서드로 인코딩 후 실행하면 되는 문제였다.</p><p>항상 인코딩 문제를 겪을 때마다 문자 인코딩 방식이 달라서 그래! UTF-8 로 인코딩 해주면 해결 되는 문제야! 라고만 생각하며 쉽게 넘어가는 경우가 많았다.</p><p>그리고 별로 중요한 문제라고 생각하지 않았던 것도 있다. 해결하면 그만이지 자주 있는 일도 아니고 그때 또 하면 되는걸 인코딩까지 공부해야돼? 라는 생각…</p><p>그래서 그냥 알아보기로 했다.</p><h2 id="유니코드-UNICODE-는-뭐지"><a href="#유니코드-UNICODE-는-뭐지" class="headerlink" title="유니코드(UNICODE)는 뭐지?"></a>유니코드(UNICODE)는 뭐지?</h2><p>유니코드는 무엇일까 아스키 코드는 뭘까 항상 UTF-8 EUC-KR 많이 들었는데 이게 유니코드인가?</p><p>유니코드란 숫자, 전세계의 문자들을 매핑해놓은 구조이다. 먼저 등장했던 아스키코드는 영어만 매핑되어 표현할 수 있는 문자열의 제약이 존재했다. 전세계의 많은 언어들을 표현하기 위해서 아스키코드가 등장하게 된것이다.</p><p>아스키코드에서 대문자 A는 16진수 0x41, 10진수 65로 매핑되어있다. 이러한 형식과 동일하게 유니코드또한 아스키코드에서 표현하지 못하는 문자까지 포함하여 이루어진 코드표인것이다.</p><p>간단하게는 A라는 문자가 0x41 인 것을 앞에 U+가 합쳐져 U+0x41로 매핑되어있는 형식이다.</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>두가지 모두 유니코드를 어떻게 인코딩 할것인지 방식들이다. 가장 많이 사용되는 UTF-8은 8비트를 기준으로 인코딩하는 방식을 작동하는 인코딩 방식이다.</p><blockquote><p><strong>루</strong> 라는 한글을 유니코드표에서 찾아보며 UTF-8로 어떻게 인코딩이 되었는지 알아보자</p></blockquote><p>먼저 <em>루</em>는 유니코드 표에서 찾아보면 U+B8E8 이라는 키로 매핑되어있는 문자였다. 그럼 U+B828 을 UTF-8을 통해 인코딩하면 어떤 형식으로 바뀌는 걸까</p><p>U+B8E8 은 2진수로 1011 1000 1110 1000 이다. 이때 UTF-8은 3바이트 가변 표기하는 인코딩 방식으로</p><p><strong>1110xxxx 10xxxxxx 10xxxxxx</strong>에 x 자리에 2진수를 차례대로 넣어주면 된다. 따라서</p><p><span style="color: red">1110</span><span style="color: blue">1011</span>  <span style="color: red">10</span><span style="color: blue">100011</span> <span style="color: red">10</span><span style="color: blue">101000</span></p>파란색 자리에 채워넣어주면 되는 것이다. <p>또한 <strong>루</strong>라는 문자의 UTF-8 값은 235, 163, 168인데 위에서 나온 숫자를 각각 변환하면 11101011 =&gt; 235, 10100011 =&gt; 163, 10101000 =&gt; 168과 일치한다.</p><p>이러한 방식으로 <strong>비</strong> 라는 문자열까지 알아보면</p><blockquote><p>UNICODE =&gt; U+BE44<br>UTF-8: 235, 185, 132;<br>2진수 1011 1110 0100 0100<br>3바이트 가변 표현 방식 11101011 10111001 10000100<br>3바이트 가변 표현방식 2진수 10진수 변환 235, 185, 132 = UTF-8 10진수 3개와 일치</p></blockquote><p>유니코드와 UTF-8에대해 간략하게 어떤식으로 구성되어 있는지 알아보았다.</p><p>이처럼 유니코드는 아스키를 포함한 문자 코드 표이고 UTF-8은 해당 문자를 어떤 방식으로 인코딩 할지 결정하는 수단 중 한가지라고 볼 수 있다. 시간이 된다면 인코딩은 어떤 방식으로 이루어지며 어떤 것인지 알아보도록 해야겠다.</p>]]></content:encoded>
      
      
      
      
      <comments>http://hanjuren.github.io/2022/04/09/UNICODE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Postgresql 데이터 csv로 저장 및 csv데이터 insert하기</title>
      <link>http://hanjuren.github.io/2022/03/24/postgresql/Postgresql-%EB%8D%B0%EC%9D%B4%ED%84%B0-csv%EB%A1%9C-%EC%A0%80%EC%9E%A5-%EB%B0%8F-csv%EB%8D%B0%EC%9D%B4%ED%84%B0-insert%ED%95%98%EA%B8%B0/</link>
      <guid>http://hanjuren.github.io/2022/03/24/postgresql/Postgresql-%EB%8D%B0%EC%9D%B4%ED%84%B0-csv%EB%A1%9C-%EC%A0%80%EC%9E%A5-%EB%B0%8F-csv%EB%8D%B0%EC%9D%B4%ED%84%B0-insert%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 24 Mar 2022 08:28:12 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;쿼리결과-csv-파일로-저장하기&quot;&gt;&lt;a href=&quot;#쿼리결과-csv-파일로-저장하기&quot; class=&quot;headerlink&quot; title=&quot;쿼리결과 csv 파일로 저장하기&quot;&gt;&lt;/a&gt;쿼리결과 csv 파일로 저장하기&lt;/h3&gt;&lt;p&gt;Database: </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="쿼리결과-csv-파일로-저장하기"><a href="#쿼리결과-csv-파일로-저장하기" class="headerlink" title="쿼리결과 csv 파일로 저장하기"></a>쿼리결과 csv 파일로 저장하기</h3><p>Database: Postgresql<br>실행환경: Docker</p><ol><li><p>psql 접속하여 실행하는 법</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;데이터베이스 컨테이너&gt; bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 컨테이너 접속 후</span></span><br><span class="line">psql -U &lt;name&gt; -d &lt;database&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> psql 접속 후</span></span><br><span class="line">COPY (select * from &lt;tablename&gt;) To &#x27;/path/fiilename.csv&#x27; With CSV DELIMITER &#x27;,&#x27; HEADER;</span><br></pre></td></tr></table></figure></li><li><p>스크립트 작성으로 만들기</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec &lt;데이터베이스 컨테이너&gt; \</span><br><span class="line">su - postgres -c \</span><br><span class="line">&#x27;</span><br><span class="line">psql -U &lt;username&gt; -d &quot;&lt;database name&gt;&quot; \</span><br><span class="line">-c &quot;COPY (select * from &lt;table name&gt;) To &#x27;&quot;&#x27;/path/fiilename.csv&#x27;&quot;&#x27; With CSV DELIMITER &#x27;&quot;&#x27;,&#x27;&quot;&#x27; HEADER; &quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>주의사항: 따옴표 내부에서 문자열 조건이나 경로 입력 시 ‘“‘문자열’”‘로 감싸서 작성해야 문자열로 인식한다.</p></li></ol><h3 id="csv-파일-import-하기"><a href="#csv-파일-import-하기" class="headerlink" title="csv 파일 import 하기"></a>csv 파일 import 하기</h3><ol><li><p>psql 접속하여 실행하는 법</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;데이터베이스 컨테이너&gt; bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 컨테이너 접속 후</span></span><br><span class="line">psql -U &lt;name&gt; -d &lt;database&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> psql 접속 후</span></span><br><span class="line">COPY &lt;tablename&gt; FROM &#x27;/path/filename.csv&#x27; DELIMITER &#x27;,&#x27; CSV HEADER;</span><br></pre></td></tr></table></figure></li><li><p>스크립트 작성으로 만들기</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec &lt;데이터베이스 컨테이너 이름&gt; \</span><br><span class="line">su - postgres -c \</span><br><span class="line">&#x27;</span><br><span class="line">psql -U &lt;username&gt; -d &quot;&lt;database name&gt;&quot; \</span><br><span class="line">-c &quot;COPY &lt;table name&gt; FROM &#x27;&quot;&#x27;/path/filename.csv&#x27;&quot;&#x27; DELIMITER &#x27;&quot;&#x27;,&#x27;&quot;&#x27; CSV HEADER; &quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>스크립트 작성 중 알게 된 것<br>도커로 실행하는 레일스 앱에 스크립트에서 명령을 실행하기위해서는 다음과 같이 작성한다.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i &lt;container&gt; rails c &lt;&lt;EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 실행하고 싶은 명령어</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/PostgreSQL/">PostgreSQL</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      
      <category domain="http://hanjuren.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      
      <comments>http://hanjuren.github.io/2022/03/24/postgresql/Postgresql-%EB%8D%B0%EC%9D%B4%ED%84%B0-csv%EB%A1%9C-%EC%A0%80%EC%9E%A5-%EB%B0%8F-csv%EB%8D%B0%EC%9D%B4%ED%84%B0-insert%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby on Rails Grape Gem</title>
      <link>http://hanjuren.github.io/2022/03/06/ruby/Ruby-on-Rails-Grape-Gem/</link>
      <guid>http://hanjuren.github.io/2022/03/06/ruby/Ruby-on-Rails-Grape-Gem/</guid>
      <pubDate>Sun, 06 Mar 2022 03:11:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;루비-온-레일스-Grape-Gem-사용하기&quot;&gt;&lt;a href=&quot;#루비-온-레일스-Grape-Gem-사용하기&quot; class=&quot;headerlink&quot; title=&quot;루비 온 레일스 Grape Gem 사용하기&quot;&gt;&lt;/a&gt;루비 온 레일스 Grape Ge</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="루비-온-레일스-Grape-Gem-사용하기"><a href="#루비-온-레일스-Grape-Gem-사용하기" class="headerlink" title="루비 온 레일스 Grape Gem 사용하기"></a>루비 온 레일스 Grape Gem 사용하기</h2><p>Grape 젬은 레일스 환경에서 REST 와 유사한 API 프레임워크이다.</p><blockquote><p>Grape GitHub<br><a href="https://github.com/ruby-grape/grape">Grape Gem GitHub HomePage</a>  </p></blockquote><h3 id="Install-Gem"><a href="#Install-Gem" class="headerlink" title="Install Gem"></a>Install Gem</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Gemfile</span><br><span class="line">gem &#x27;grape&#x27;</span><br></pre></td></tr></table></figure><p>Gemfile 에 grape 젬을 추가해준뒤 bundle install 명령어를 실행한다.</p><h3 id="설정하기"><a href="#설정하기" class="headerlink" title="설정하기"></a>설정하기</h3><p>적용하기 위한 프로젝트의 레일스 버전이 7버전으로 grape github README 를 따라 6버전 이상의 세팅 방법을 따라 진행 하였다.  </p><p><strong>path: ./config/initializers/inflections.rb</strong><br>아래의 코드가 이미 작성되어있고 주석처리가 되어있다. 해당부분 주석을 제거하고 작성해주면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActiveSupport::Inflector.inflections(<span class="symbol">:en</span>) <span class="keyword">do</span> <span class="params">|inflect|</span></span><br><span class="line">  inflect.acronym <span class="string">&quot;DefaultController&quot;</span> <span class="comment"># 베이스가 되는 클래스의 이름을 입력하는 부분이다. </span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="컨트롤러-생성"><a href="#컨트롤러-생성" class="headerlink" title="컨트롤러 생성"></a>컨트롤러 생성</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd app</span><br><span class="line">mkdir api</span><br><span class="line">touch base_api.rb</span><br><span class="line">touch default_controller.rb</span><br></pre></td></tr></table></figure><p><strong>path: ./app/api/base_api.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApi</span> &lt; Grape::API</span></span><br><span class="line">  <span class="comment"># 기타 공용 함수들?</span></span><br><span class="line">  helpers <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_port</span></span></span><br><span class="line">      Rails.env[<span class="string">&#x27;PORT&#x27;</span>] <span class="params">||</span> <span class="number">3000</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>path: ./app/api/default_controller.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultController</span> &lt; BaseApi</span></span><br><span class="line">  version <span class="string">&#x27;v1&#x27;</span>, <span class="symbol">using:</span> <span class="symbol">:path</span></span><br><span class="line">  format <span class="symbol">:json</span></span><br><span class="line">  prefix <span class="symbol">:api</span></span><br><span class="line"></span><br><span class="line">  get <span class="string">&#x27;alive&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    <span class="string">&quot;rails server run <span class="subst">#&#123;server_port&#125;</span> port&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>path: ./config/routes.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html</span></span><br><span class="line">  mount DefaultController =&gt; <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="curl을-이용하여-요청하기"><a href="#curl을-이용하여-요청하기" class="headerlink" title="curl을 이용하여 요청하기"></a>curl을 이용하여 요청하기</h3><p><img src="https://ifh.cc/g/DaJ2qb.jpg," title="curl test"></br></p><h3 id="User-Controller-생성하기"><a href="#User-Controller-생성하기" class="headerlink" title="User Controller 생성하기"></a>User Controller 생성하기</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> work dir: ./app</span></span><br><span class="line">cd user_controller</span><br><span class="line">touch user_api.rb</span><br></pre></td></tr></table></figure><p><strong>path: ./app/api/user_controller/user_api.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">UserController</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">UserApi</span> &lt; BaseApi</span></span><br><span class="line"></span><br><span class="line">    resource <span class="string">&#x27;users&#x27;</span> <span class="keyword">do</span></span><br><span class="line">      helpers <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">          params.as_json(<span class="symbol">only:</span> %i[email password name nick_name age gender])</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="comment"># GET /api/v1/users/all</span></span><br><span class="line">      get <span class="string">&#x27;all&#x27;</span> <span class="keyword">do</span></span><br><span class="line">        users = User.all</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="symbol">total:</span> users.count,</span><br><span class="line">          <span class="symbol">result:</span> users.map &#123; <span class="params">|r|</span> Entities::UserEntity.represent(r) &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># POST /api/v1/users</span></span><br><span class="line">      post <span class="keyword">do</span></span><br><span class="line">        user = User.create(post_params)</span><br><span class="line">        present user, <span class="symbol">with:</span> Entities::UserEntity</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="POST-users"><a href="#POST-users" class="headerlink" title="POST /users"></a>POST /users</h4><p><img src="https://ifh.cc/g/4Duv9J.jpg" width=60%></img></br></p><h4 id="GET-users-all"><a href="#GET-users-all" class="headerlink" title="GET /users/all"></a>GET /users/all</h4><p><img src="https://ifh.cc/g/qmatFk.png" width=60%></img></br></p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/categories/Ruby-on-Rails/">Ruby on Rails</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/tags/Ruby-on-Rails/">Ruby on Rails</category>
      
      
      <comments>http://hanjuren.github.io/2022/03/06/ruby/Ruby-on-Rails-Grape-Gem/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby on Rails Docker Setting (레일스 도커 개발환경 세팅하기)</title>
      <link>http://hanjuren.github.io/2022/02/19/ruby/Ruby-on-Rails-Docker-Setting/</link>
      <guid>http://hanjuren.github.io/2022/02/19/ruby/Ruby-on-Rails-Docker-Setting/</guid>
      <pubDate>Sat, 19 Feb 2022 05:53:25 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Ruby-on-Rails-Docker-Setting&quot;&gt;&lt;a href=&quot;#Ruby-on-Rails-Docker-Setting&quot; class=&quot;headerlink&quot; title=&quot;Ruby on Rails Docker Setting&quot;&gt;&lt;/a&gt;Ru</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Ruby-on-Rails-Docker-Setting"><a href="#Ruby-on-Rails-Docker-Setting" class="headerlink" title="Ruby on Rails Docker Setting"></a>Ruby on Rails Docker Setting</h2><h4>레일스 개발 환경을 도커로 세팅해보자</h4>크게 복잡하고 거창한 환경 세팅은 아니지만 처음 세팅이 항상 골칫거리이다..<blockquote><p>개발 환경<br>ruby-on-rails -v 7.0^<br>ruby -v 2.7.1<br>RubyMine<br>Docker<br>docker-compose<br>postgres -v 14.2-alpine</p></blockquote><h3 id="1-기본-세팅을-위한-파일-생성-및-작성"><a href="#1-기본-세팅을-위한-파일-생성-및-작성" class="headerlink" title="1. 기본 세팅을 위한 파일 생성 및 작성"></a>1. 기본 세팅을 위한 파일 생성 및 작성</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir backend</span><br><span class="line">cd backend</span><br><span class="line"></span><br><span class="line">touch Dockerfile</span><br><span class="line">touch docker-compose.yml</span><br><span class="line">touch docker-compoes.env</span><br></pre></td></tr></table></figure><p><strong>Dockerfile 작성</strong>  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> ruby:<span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -qq &amp;&amp; apt-get install -y nodejs postgresql-client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> Gemfile ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> Gemfile.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bundle install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a script to be executed every time the container starts.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint.sh /usr/bin/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/bin/entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the main process to run when running the image</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;rails&quot;</span>, <span class="string">&quot;server&quot;</span>, <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml 작성</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">## backend</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14.2-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">docker-compose.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./psql/data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## api</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&quot;rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b &#x27;0.0.0.0&#x27;&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">docker-compose.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/usr/src/app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;database&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RAILS_ENV=development</span></span><br></pre></td></tr></table></figure><p><strong>Gemfile, Gemfile.lock 생성</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch Gemfile</span><br><span class="line">touch Gemfile.lock</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Gemfile</span><br><span class="line">source &quot;https://rubygems.org&quot;</span><br><span class="line"></span><br><span class="line">ruby &quot;2.7.1&quot;</span><br></pre></td></tr></table></figure><p><strong>docker-compose.env</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POSTGRES_USER=user</span><br><span class="line">POSTGRES_PASSWORD=password</span><br><span class="line"></span><br><span class="line">PG_USER=user</span><br><span class="line">PG_PASSWORD=password</span><br></pre></td></tr></table></figure><h3 id="2-빌드-시작"><a href="#2-빌드-시작" class="headerlink" title="2. 빌드 시작"></a>2. 빌드 시작</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><p>빌드를 시작해도 아직 레일스 세팅이 안되어있다. docker 컨테이너를 이용하여 레일스 설치를 진행한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --no-deps web rails new . --api --force --database=postgresql</span><br></pre></td></tr></table></figure><p>실행 시 뭔가 쭉쭉 설치되고 로컬 디렉토리와 컨테이너 볼륨을 지정해줬기 때문에 작업 디렉토리에 레일스 폴더, 파일들이 생성된다.</p><p></br><img src="https://ifh.cc/g/RTjbKn.png" width=200></img></br></p><h3 id="3-database-yml-작성"><a href="#3-database-yml-작성" class="headerlink" title="3. database.yml 작성"></a>3. database.yml 작성</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./config/database.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgresql</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf8</span></span><br><span class="line">  <span class="comment"># For details on connection pooling, see Rails configuration guide</span></span><br><span class="line">  <span class="comment"># https://guides.rubyonrails.org/configuring.html#database-pooling</span></span><br><span class="line">  <span class="attr">pool:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">database</span> <span class="comment"># docker 환경 데이터베이스와 연결을 하기위해서는 컨테이너 이름으로 지정해주어야 한다.</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">juren</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">juren</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">juren_development</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">juren_test</span></span><br></pre></td></tr></table></figure><h3 id="4-데이터베이스-생성하기"><a href="#4-데이터베이스-생성하기" class="headerlink" title="4. 데이터베이스 생성하기"></a>4. 데이터베이스 생성하기</h3><p>아직 도커에서 실행중인 postgresql 에는 데이터베이스가 생성되어있지 않다. yml 파일에서 지정한 데이터베이스들을 생성해주기 위해서는 아래 명령어를 실행한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compsoe up # 컨테이너 실행 명령어</span><br><span class="line">docker-compose run web rake db:create # rails db 생성 명령어</span><br></pre></td></tr></table></figure><h3 id="5-localhost-접속"><a href="#5-localhost-접속" class="headerlink" title="5. localhost 접속"></a>5. localhost 접속</h3><p>크롬 -&gt; localhost:3000 접속 결과 확인</p><p></br><img src="https://ifh.cc/g/5RUnse.jpg"></img></br></p><h2>끝~👍👍</h2><h6>은 아니고 이제 시작...</h6>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/categories/PostgreSQL/">PostgreSQL</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      <category domain="http://hanjuren.github.io/categories/Ruby-on-Rails/">Ruby on Rails</category>
      
      <category domain="http://hanjuren.github.io/categories/docker-compose/">docker-compose</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      <category domain="http://hanjuren.github.io/tags/Ruby-on-Rails/">Ruby on Rails</category>
      
      
      <comments>http://hanjuren.github.io/2022/02/19/ruby/Ruby-on-Rails-Docker-Setting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby 메서드</title>
      <link>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EB%A9%94%EC%84%9C%EB%93%9C/</link>
      <guid>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EB%A9%94%EC%84%9C%EB%93%9C/</guid>
      <pubDate>Sun, 30 Jan 2022 10:33:57 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;루비-메서드&quot;&gt;&lt;a href=&quot;#루비-메서드&quot; class=&quot;headerlink&quot; title=&quot;루비 메서드&quot;&gt;&lt;/a&gt;루비 메서드&lt;/h2&gt;&lt;h3 id=&quot;메서드-정의&quot;&gt;&lt;a href=&quot;#메서드-정의&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="루비-메서드"><a href="#루비-메서드" class="headerlink" title="루비 메서드"></a>루비 메서드</h2><h3 id="메서드-정의"><a href="#메서드-정의" class="headerlink" title="메서드 정의"></a>메서드 정의</h3><p>메서드는 def 키워드로 정의하며 이름의 마지막에는 <strong>!, ?, =</strong> 를 사용할 수 있다. 각각의 키워드는 다음과 같이 사용된다.</p><ol><li>True, False를 반환하는 메서드의 경우 ?를 사용하기도 한다.</li><li>수신자의 값을 바꿔버리는 메서드의 경우 !를 사용한다. 이러한 메서드는 뱅 메서드라고 불린다.</li><li>대입문의 좌측에 올 수 있는 메서드이름 마지막에 = 기호를 사용한다.</li></ol><h3 id="가변-인자-리스트"><a href="#가변-인자-리스트" class="headerlink" title="가변 인자 리스트"></a>가변 인자 리스트</h3><p>개수가 정해지지 않은 가변 매개변수를 전달하거나 하나의 매개변수로 여러개의 매개변수를 처리한다면 메서드 인자의 마지막에 가변매개변수 앞에 *기호를 사용하면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_1</span><span class="params">(arg_1, *rest)</span></span></span><br><span class="line">  <span class="string">&quot;arg_1 = <span class="subst">#&#123;arg_1&#125;</span>, rest = <span class="subst">#&#123;rest.inspect&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">pp method_1(<span class="string">&quot;one&quot;</span>) <span class="comment"># =&gt; &quot;arg_1 = one, rest = []&quot;</span></span><br><span class="line">pp method_1(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>) <span class="comment"># =&gt; &quot;arg_1 = one, rest = [\&quot;two\&quot;]&quot;</span></span><br><span class="line">pp method_1(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="number">1</span>) <span class="comment"># =&gt; &quot;arg_1 = one, rest = [\&quot;two\&quot;, 1]&quot;</span></span><br></pre></td></tr></table></figure><p>첫 번째 매개변수는 일반적인 매개변수로 지정되고 두 번쨰 매개변수에 *기호가 붙어있기 때문에 남은 매개변수 모두를 Array객체에 저장하여 매개변수에 대입한다.</p><p>이러한 가변 매개변수는 메서드에서 직접 사용하지는 않지만 상위 클래스에서 같은 이름을 가지고 있는 메서드를 호출하고자 하는 경우에 사용되기도 한다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(*)</span></span></span><br><span class="line">    pp <span class="string">&quot;parent class&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &lt; Parent</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(*)</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = Child.new</span><br><span class="line">a.do_something <span class="comment"># =&gt; &quot;parent class&quot;</span></span><br></pre></td></tr></table></figure><h3 id="메서드와-블록"><a href="#메서드와-블록" class="headerlink" title="메서드와 블록"></a>메서드와 블록</h3><p>메서드를 호출할때 블록을 결합시켜 호출을 할 수 있다. 이러 방식으로 결합된 메서드는 내부에서 yield를 사용하여 호출이 가능하다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some</span><span class="params">(arg_1)</span></span></span><br><span class="line">  <span class="keyword">yield</span>(arg_1 + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">some(<span class="number">1</span>) &#123; <span class="params">|value|</span> pp <span class="string">&quot;value : <span class="subst">#&#123;value&#125;</span>&quot;</span> &#125; <span class="comment"># =&gt; 2</span></span><br></pre></td></tr></table></figure><p>이러한 방식으로도 사용이 가능하지만 매개변수 앞에 &amp; 기호를 붙여주면 Proc 객체로 변환되어 이 객체를 마지막 매개변수에 대입하여 사용할 수 있다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc</span><span class="params">(arg_1, &amp;<span class="built_in">proc</span>)</span></span></span><br><span class="line">  <span class="built_in">proc</span>.call(arg_1)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">proc</span>(<span class="number">1</span>) &#123; <span class="params">|v|</span> pp v * <span class="number">10</span> &#125; <span class="comment"># =&gt; 10</span></span><br></pre></td></tr></table></figure><h3 id="루비-메서드-결과-반환"><a href="#루비-메서드-결과-반환" class="headerlink" title="루비 메서드 결과 반환"></a>루비 메서드 결과 반환</h3><p>루비 메서드는 일반적으로 결과를 반환한다. 무조건 반환하는 것은 아니다. 하지만 결과를 반환하는 메서드에서 결과값은 일반적으로 마지막으로 실행된 표현식의 결과값이다.<br>대부분 return 문을 작성하지 않아도 되지만 메서드 실행 중간 빠져나가야 한다면 return 문을 사용하는 경우도 있다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span></span></span><br><span class="line">  <span class="number">100</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    value = i * i</span><br><span class="line">    <span class="keyword">return</span> i, value <span class="keyword">if</span> value &gt; <span class="number">1000</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">v = re</span><br><span class="line">pp v <span class="comment"># =&gt; [32, 1024]</span></span><br></pre></td></tr></table></figure><p>루비에서는 두개 이상의 결과를 return 하게 되면 배열 형태로 결과값을 반환하게 된다. 이런식으로 반환된 Array 값은 병렬 대입문으로 값을 이용 할 수 있다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span></span></span><br><span class="line">  <span class="number">100</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    value = i * i</span><br><span class="line">    <span class="keyword">return</span> i, value <span class="keyword">if</span> value &gt; <span class="number">1000</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">index, value = re</span><br><span class="line">pp index <span class="comment"># =&gt; 32</span></span><br><span class="line">pp value <span class="comment"># =&gt; 1024</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      
      <comments>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EB%A9%94%EC%84%9C%EB%93%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby 정규표현식</title>
      <link>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/</link>
      <guid>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/</guid>
      <pubDate>Sun, 30 Jan 2022 07:40:22 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;정규표현식&lt;/strong&gt;&lt;br&gt;그동안 공부를 하면서 서버에서 정규 표현식을 사용하는 일이 얼마나 있을까? 라는 의문과 필요하면 그때그때 찾아보면서 해도 상관없겠다 라는 마음으로 미루고 미룬 것 중 하나가 정규표현식이였다.&lt;br&gt;간단한 코딩 테스트 문제에서도 등장했던 정규표현식인데 항상 마주하면 생각만큼 쉽지 않고 복잡한 정규표현식…&lt;br&gt;왜 정규표현식이 서버 코드에서 사용하는 일이 많지 않을 것이라고 생각했는지 의문이 들 정도로 회사 프로젝트에서 정규표현식의 필요성이 느껴졌다. 가장 많이 사용하는 곳은 Rspec을 활용한 테스트 케이스 코드 그리고 파일을 읽고 쓰는 과정에서 항상 등장하는 정규표현식.. &lt;/p&gt;
&lt;p&gt;그래서 기본적인 정규표현식의 형태에 대해 알아보고자 정규표현식을 학습해보고자 한다. 모든 언어에서 정규표현식을 지원하지만 주로 사용하는 언어가 루비와 자바스크립트인 만큼 그리고 회사 백엔드 코드는 루비로 이루어져있기 때문에? 루비 기준으로 루비에서는 어떤 방식으로 정규표현식이 이루어 지는지 알아보았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;정규표현식이란?&lt;br&gt;정규표현식이란 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정규 표현식을 사용해야 하는 이유는 여러가지가 있겠지만 직접 직면한 문제에서 느낀점은 수많은 데이터 혹은 문자들에서 원하는 패턴의 문자열을 매칭하고 치환하는 작업을 할때 정규표현식을 모른다면?&lt;br&gt;일일히 원하는 결과를 위한 메서드를 만들어야 할 것이다. 하지만 정규표현식을 통한 연산을 통해 원하는 값을 얻고 변환하며 결과를 가지고 조건문에서 사용이 가능해진다면&lt;br&gt;하나하나 메서드를 만들 필요도 없고 생산성이 좋아진다. 물론 이런 작업을 위해 그래도 난 메서드를 만들어 보겠다는 사람이 굳이 존재할까 싶지만 정규표현식을 활용하여 많은 작업과 처리가 이루어 질 수 있기 때문에 기본적인 정규표현식에대해 학습해보고자 한다.  &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>정규표현식</strong><br>그동안 공부를 하면서 서버에서 정규 표현식을 사용하는 일이 얼마나 있을까? 라는 의문과 필요하면 그때그때 찾아보면서 해도 상관없겠다 라는 마음으로 미루고 미룬 것 중 하나가 정규표현식이였다.<br>간단한 코딩 테스트 문제에서도 등장했던 정규표현식인데 항상 마주하면 생각만큼 쉽지 않고 복잡한 정규표현식…<br>왜 정규표현식이 서버 코드에서 사용하는 일이 많지 않을 것이라고 생각했는지 의문이 들 정도로 회사 프로젝트에서 정규표현식의 필요성이 느껴졌다. 가장 많이 사용하는 곳은 Rspec을 활용한 테스트 케이스 코드 그리고 파일을 읽고 쓰는 과정에서 항상 등장하는 정규표현식.. </p><p>그래서 기본적인 정규표현식의 형태에 대해 알아보고자 정규표현식을 학습해보고자 한다. 모든 언어에서 정규표현식을 지원하지만 주로 사용하는 언어가 루비와 자바스크립트인 만큼 그리고 회사 백엔드 코드는 루비로 이루어져있기 때문에? 루비 기준으로 루비에서는 어떤 방식으로 정규표현식이 이루어 지는지 알아보았다.</p><blockquote><p>정규표현식이란?<br>정규표현식이란 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어이다.</p></blockquote><p>정규 표현식을 사용해야 하는 이유는 여러가지가 있겠지만 직접 직면한 문제에서 느낀점은 수많은 데이터 혹은 문자들에서 원하는 패턴의 문자열을 매칭하고 치환하는 작업을 할때 정규표현식을 모른다면?<br>일일히 원하는 결과를 위한 메서드를 만들어야 할 것이다. 하지만 정규표현식을 통한 연산을 통해 원하는 값을 얻고 변환하며 결과를 가지고 조건문에서 사용이 가능해진다면<br>하나하나 메서드를 만들 필요도 없고 생산성이 좋아진다. 물론 이런 작업을 위해 그래도 난 메서드를 만들어 보겠다는 사람이 굳이 존재할까 싶지만 정규표현식을 활용하여 많은 작업과 처리가 이루어 질 수 있기 때문에 기본적인 정규표현식에대해 학습해보고자 한다.  </p><span id="more"></span><h2 id="루비-정규-표현식"><a href="#루비-정규-표현식" class="headerlink" title="루비 정규 표현식"></a>루비 정규 표현식</h2><h3 id="패턴으로-문자열-매치하기"><a href="#패턴으로-문자열-매치하기" class="headerlink" title="패턴으로 문자열 매치하기"></a>패턴으로 문자열 매치하기</h3><p>루비에서는 <strong>=~</strong> 기호를 사용하여 지정한 패턴이 문자열에 매칭 되는지 판별한다. 문자열이 패턴에 매치한다면 <strong>=~</strong> 연산자는 매치된 위치를 숫자로 리턴한다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">re_1 = <span class="regexp">/cat/</span> =~ <span class="string">&#x27;dog and cat&#x27;</span></span><br><span class="line">re_2 = <span class="regexp">/cat/</span> =~ <span class="string">&#x27;catch&#x27;</span></span><br><span class="line">re_3 = <span class="regexp">/cat/</span> =~ <span class="string">&#x27;Cat&#x27;</span></span><br><span class="line"></span><br><span class="line">pp re_1 <span class="comment"># =&gt; 8</span></span><br><span class="line">pp re_2 <span class="comment"># =&gt; 0</span></span><br><span class="line">pp re_3 <span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><p>매치 결과가 true일 경우 매치되는 첫번째 인덱스 값을 리턴하며 결과가 false 라면 nil을 반환한다. 결과 반환값이 true || false 이기 때문에 해당 연산을 조건문에서도 사용이 가능하다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&#x27;dog and cat&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> /cat/ =~ str</span><br><span class="line">  pp <span class="string">&#x27;true&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  pp <span class="string">&#x27;false&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>일치여부를 확인하는 =~ 연산자의 반대 의미인 !~ 연산자도 존재한다. 반대의 의미를 가지며 일치하지 않는 결과의 값을 반환하게 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pp /cat/ !~ <span class="string">&#x27;dog and cat&#x27;</span> <span class="comment"># =&gt; &#x27;false&#x27;</span></span><br><span class="line">pp /cat/ !~ <span class="string">&#x27;Cat&#x27;</span> <span class="comment"># =&gt; &#x27;true&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="패턴으로-문자열-치환하기"><a href="#패턴으로-문자열-치환하기" class="headerlink" title="패턴으로 문자열 치환하기"></a>패턴으로 문자열 치환하기</h3><p><strong>sub</strong>메서드는 문자열에서 패턴과 일치하는 문자열을 치환 문자열로 치환해주는 메서드이다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&#x27;Dog and Cat&#x27;</span></span><br><span class="line">new_str = str.sub(<span class="regexp">/Cat/</span>, <span class="string">&#x27;Rabbit&#x27;</span>)</span><br><span class="line">pp new_str <span class="comment"># =&gt; &quot;Dog and Rabbit&quot;</span></span><br></pre></td></tr></table></figure><p><strong>sub</strong> 메서드는 일치하는 패턴의 첫번째 부분만 치환해주는 메서드로 전역적으로 문자열을 치환하기 위해서는 <strong>gsub</strong>메서드를 활용하면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_2 = <span class="string">&quot;ababab&quot;</span></span><br><span class="line">new_str_2 = str_2.gsub(<span class="regexp">/a/</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">pp new_str_2 <span class="comment"># =&gt; &quot;*b*b*b&quot;</span></span><br></pre></td></tr></table></figure><p><strong>sub, gsub</strong>메서드를 사용할 때 알아두면 좋은 점은 해당 메서드를 사용하여 반환되는 결과값은 기존 문자열 값에 영향을 주지 않고 새로운 문자열을 반환한다는 점이다.<br>기존 문자열을 변환하고 싶다면 메서드 뒤에 !를 사용하여 문자열 값을 직접 바꾸도록 해주면 된다. 또한 !를 사용하여 문자열을 변경하고자 할때는 패턴이 매치 될경우에만 문자열을 치환하며 패턴과 일치 하지 않다면<br>nil을 반환한다. 따라서 !를 사용하여 문자열을 치환하는 것은 조건문에서도 활용이 가능하다는 의미이다.</p><h3 id="정규-표현식에-대해-더-알아보기"><a href="#정규-표현식에-대해-더-알아보기" class="headerlink" title="정규 표현식에 대해 더 알아보기"></a>정규 표현식에 대해 더 알아보기</h3><p>루비란 무엇인가에서 루비의 모든 것은 객체로 활용된다고 했다. 따라서 정규표현식도 루비에서는 객체로 평가가 된다. 정확히는 Regexp의 인스턴스이다. 그러므로 정규표현식을 변수에 대입하거나 메서드 인자로 넘겨줄 수 있다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&#x27;Dog and Cat&#x27;</span></span><br><span class="line"><span class="comment"># 변수에 대입하기</span></span><br><span class="line">pattern = <span class="regexp">/Cat/</span></span><br><span class="line">pp pattern =~ str <span class="comment"># =&gt; 8</span></span><br></pre></td></tr></table></figure><p>정규표현식 생성은 지금까지 생성했던 방식처럼 리터럴을 이용한 생성도 가능하지만 Regexp 클래스의 .new 메서드 또는 %r{…} 문법을 사용하여 생성이 가능하다.</p><p>%r{…}문법은 “/“를 포함한 정규표현식 생성에 유용하다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Dog and Cat&quot;</span></span><br><span class="line">pp Regexp.new(<span class="string">&quot;Dog&quot;</span>) =~ str <span class="comment"># =&gt; 0</span></span><br><span class="line">pp %r&#123;Dog&#125; =~ str <span class="comment"># =&gt; 0</span></span><br></pre></td></tr></table></figure><h4 id="정규표현식-옵션"><a href="#정규표현식-옵션" class="headerlink" title="정규표현식 옵션"></a>정규표현식 옵션</h4><table><thead><tr><th align="center">옵션</th><th>설명</th></tr></thead><tbody><tr><td align="center">i</td><td>대소문자 구분 옵션(대소문자 구별을 하지 않는다.)</td></tr><tr><td align="center">o</td><td>정규표현식내 치환을 위한 평가를 한번만 진행</td></tr><tr><td align="center">m</td><td>멀티라인 모드</td></tr><tr><td align="center">x</td><td>확장모드 가독성을 위해 적절한 공백과 주석 활용이 가능하다.</td></tr></tbody></table><h4 id="패턴매치"><a href="#패턴매치" class="headerlink" title="패턴매치"></a>패턴매치</h4><p>정규표현식 객체를 생성하고 나면 **match, =~ !~**등의 연산자를 활용하여 문자열을 평가, 치환, 탐색 할 수 있다. 이때 연산을 위한 피연산자 중 하나는 정규표현식 객체여야 한다.</p><p>루비에서 문자열이 표현식에 의해 매치가 되고 나면 특수 변수에 값이 저장되는데 대부분의 루비 프로그래밍에서는 MatchData를 사용하여 값을 활용한다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regexp_test</span><span class="params">(str, pattern)</span></span></span><br><span class="line">  match = pattern.match(str)</span><br><span class="line">  <span class="keyword">if</span> match</span><br><span class="line">    pp <span class="string">&quot;<span class="subst">#&#123;match.pre_match&#125;</span> =&gt; <span class="subst">#&#123;match[<span class="number">0</span>]&#125;</span> =&gt; <span class="subst">#&#123;match.post_match&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    pp <span class="string">&quot;No match&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">regexp_test(<span class="string">&#x27;hello my name is han juryeon&#x27;</span>, <span class="regexp">/is/</span>) <span class="comment"># =&gt; &quot;hello my name  =&gt; is =&gt;  han juryeon&quot;</span></span><br></pre></td></tr></table></figure><h4 id="복잡한-패턴"><a href="#복잡한-패턴" class="headerlink" title="복잡한 패턴"></a>복잡한 패턴</h4><p>. | () [] {} + \ ^ $ * ? 를 제외한 문자들은 자기 자신을 나타내는 문자열에 매치된다. 특수 문자들을 매치하기 위해서는 앞에 역슬래쉬를 넣어주면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;../Regexp/regexp_4&#x27;</span></span><br><span class="line"></span><br><span class="line">regexp_test(<span class="string">&#x27;yes | no&#x27;</span>, <span class="regexp">/\|/</span>) <span class="comment"># =&gt; &quot;yes  =&gt; | =&gt;  no&quot;</span></span><br><span class="line">regexp_test(<span class="string">&#x27;yes (no)&#x27;</span>, <span class="regexp">/\(no\)/</span>) <span class="comment"># =&gt; &quot;yes  =&gt; (no) =&gt; &quot;</span></span><br><span class="line">regexp_test(<span class="string">&#x27;are you sure?&#x27;</span>, <span class="regexp">/e\?/</span>) <span class="comment"># =&gt; &quot;are you sur =&gt; e? =&gt; &quot;</span></span><br></pre></td></tr></table></figure><h4 id="앵커"><a href="#앵커" class="headerlink" title="앵커"></a>앵커</h4><p>정규표현식은 기본적으로 문자열에서 처음 찾는 부분에 매치가 된다. 만약 문자열의 맨앞과 맨뒤에만 매치가 되도록 하고 싶다면 <strong>^, $</strong> 기호를 사용하면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;this is\nthe time&quot;</span></span><br><span class="line">regexp_test(str, <span class="regexp">/^the/</span>)</span><br><span class="line">regexp_test(str, <span class="regexp">/^this/</span>)</span><br><span class="line">regexp_test(str, <span class="regexp">/$is/</span>)</span><br><span class="line">regexp_test(str, <span class="regexp">/\Athe/</span>)</span><br><span class="line">regexp_test(str, <span class="regexp">/\Athis/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&quot;this is\n&quot; + &quot; =&gt; the =&gt;  time&quot;</span></span><br><span class="line"><span class="comment">&quot; =&gt; this =&gt;  is\n&quot; + &quot;the time&quot;</span></span><br><span class="line"><span class="comment">&quot;No match&quot;</span></span><br><span class="line"><span class="comment">&quot;No match&quot;</span></span><br><span class="line"><span class="comment">&quot; =&gt; this =&gt;  is\n&quot; + &quot;the time&quot;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><h4 id="문자-클래스"><a href="#문자-클래스" class="headerlink" title="문자 클래스"></a>문자 클래스</h4><p>문자 클래스란 대괄호 안에 있는 문자들의 집합을 의미한다. [aeiou]는 모음의 집합이고 [,:;!?]은 구두점에 매치된다. 이러한 방식을 활용한 정규표현식 표현도 가능해진다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str_2 = <span class="string">&quot;Price $12.&quot;</span></span><br><span class="line">regexp_test(str_2, <span class="regexp">/[aeiou]/</span>)</span><br><span class="line">regexp_test(str_2, <span class="regexp">/[\s]/</span>)</span><br><span class="line">regexp_test(str_2, <span class="regexp">/[.]/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&quot;Pr =&gt; i =&gt; ce $12.&quot;</span></span><br><span class="line"><span class="comment">&quot;Price =&gt;   =&gt; $12.&quot;</span></span><br><span class="line"><span class="comment">&quot;Price $12 =&gt; . =&gt; &quot;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>시퀀스</th><th>의미</th></tr></thead><tbody><tr><td>\d</td><td>십진수</td></tr><tr><td>\D</td><td>십진수를 제외한 모든 문자열</td></tr><tr><td>\h</td><td>십육진수 문자</td></tr><tr><td>\H</td><td>십육진수 문자를 제외한 모든 문자</td></tr><tr><td>\R</td><td>일반적인 줄바꿈 문자</td></tr><tr><td>\s</td><td>공백</td></tr><tr><td>\S</td><td>공백을 제회한 문자</td></tr><tr><td>\w</td><td>단어 문자</td></tr><tr><td>\W</td><td>단어 문자를 제회한 모든 문자</td></tr><tr><td>\X</td><td>확장 유니코드 문자소</td></tr></tbody></table><p>대괄호 내에서 c1-c2시퀀스를 사용시 두개의 시퀀스를 포함한 사이의 모든 문자와 매치가 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;see [The PickAxe-page 123]&#x27;</span></span><br><span class="line">regexp_test(a, <span class="regexp">/[A-F]/</span>)</span><br><span class="line">regexp_test(a, <span class="regexp">/[A-Fa-f]/</span>)</span><br><span class="line">regexp_test(a, <span class="regexp">/[0-9]/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&quot;see [The Pick =&gt; A =&gt; xe-page 123]&quot;</span></span><br><span class="line"><span class="comment">&quot;s =&gt; e =&gt; e [The PickAxe-page 123]&quot;</span></span><br><span class="line"><span class="comment">&quot;see [The PickAxe-page  =&gt; 1 =&gt; 23]&quot;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><h4 id="선택"><a href="#선택" class="headerlink" title="선택"></a>선택</h4><p><strong>|</strong> 기호는 역슬래쉬와 함께 사용해야 문자로 취급이 된다. 역슬래쉬로 사용하지 않는다면 표현식의 일부로 취급이 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&#x27;red ball blue sky&#x27;</span></span><br><span class="line">regexp_test(b, <span class="regexp">/d|e/</span>) <span class="comment"># =&gt; &quot;r =&gt; e =&gt; d ball blue sky&quot;</span></span><br><span class="line">regexp_test(b, <span class="regexp">/al|lu/</span>) <span class="comment"># =&gt; &quot;red b =&gt; al =&gt; l blue sky&quot;</span></span><br></pre></td></tr></table></figure><h4 id="그룹"><a href="#그룹" class="headerlink" title="그룹"></a>그룹</h4><p>괄호를 사용하여 정규 표현식 내부에서 일부를 그룹으로 묶어줄 수 있다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 표현식은 하나의 a 와 하나 혹은 다수의 n에 매치된다.</span></span><br><span class="line">regexp_test(<span class="string">&#x27;banana&#x27;</span>, <span class="regexp">/an+/</span>) <span class="comment"># =&gt; &quot;b =&gt; an =&gt; ana&quot;</span></span><br><span class="line"><span class="comment"># 아래의 표현식은 하나 혹은 여러개의 an에 매치된다.</span></span><br><span class="line">regexp_test(<span class="string">&#x27;banana&#x27;</span>, <span class="regexp">/(an)+/</span>) <span class="comment"># =&gt; &quot;b =&gt; anan =&gt; a&quot;</span></span><br></pre></td></tr></table></figure><p>그룹화 하여 매치된 결과는 다양한 방식으로 활용이 가능하다. 괄호는 매치된 결과를 모아주고 이러한 결과를 다른 정규표현식에서 사용하거나 루비 프로그램 내부에서 사용이 가능하다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/(\d\d)<span class="symbol">:</span>(\d\d)(..)/ =~ <span class="string">&quot;12:50am&quot;</span></span><br><span class="line">pp <span class="string">&quot;Hour is <span class="subst">#&#123;<span class="variable">$1</span>&#125;</span> Minute is <span class="subst">#&#123;<span class="variable">$2</span>&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">/((\d\d)<span class="symbol">:</span>(\d\d))(..)/ =~ <span class="string">&quot;12:50am&quot;</span></span><br><span class="line">pp <span class="string">&quot;Time is <span class="subst">#&#123;<span class="variable">$1</span>&#125;</span>&quot;</span></span><br><span class="line">pp <span class="string">&quot;Hour is <span class="subst">#&#123;<span class="variable">$2</span>&#125;</span> Minute is <span class="subst">#&#123;<span class="variable">$3</span>&#125;</span>&quot;</span></span><br><span class="line">pp <span class="string">&quot;AM/PM is <span class="subst">#&#123;<span class="variable">$4</span>&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&quot;Hour is 12 Minute is 50&quot;</span></span><br><span class="line"><span class="comment">&quot;Time is 12:50&quot;</span></span><br><span class="line"><span class="comment">&quot;Hour is 12 Minute is 50&quot;</span></span><br><span class="line"><span class="comment">&quot;AM/PM is am&quot;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><p>동일한 형식으로 match메서드를 활용한다면 매치되는 인덱스값을 이용하면 된다.</p><p>또한 매치된 내용을 번호가 아닌 이름으로 참조 할 수 있으며 그룹을 시작하는 괄호에서 ?&lt;..&gt;형식을 사용하면 된다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/(<span class="string">?&lt;</span>hour&gt;\d\d)<span class="symbol">:</span>(<span class="string">?&lt;</span>minute&gt;\d\d)(<span class="string">?&lt;</span>am_or_pm&gt;..)/ =~ <span class="string">&quot;12:50am&quot;</span></span><br><span class="line">pp <span class="string">&quot;Hour is <span class="subst">#&#123;hour&#125;</span>&quot;</span></span><br><span class="line">pp <span class="string">&quot;Minute is <span class="subst">#&#123;minute&#125;</span>&quot;</span></span><br><span class="line">pp <span class="string">&quot;AM/PM is <span class="subst">#&#123;am_or_pm&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&quot;Hour is 12&quot;</span></span><br><span class="line"><span class="comment">&quot;Minute is 50&quot;</span></span><br><span class="line"><span class="comment">&quot;AM/PM is am&quot;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      <category domain="http://hanjuren.github.io/tags/Regexp/">Regexp</category>
      
      
      <comments>http://hanjuren.github.io/2022/01/30/ruby/Ruby-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ruby 파일 읽기,쓰기</title>
      <link>http://hanjuren.github.io/2022/01/28/ruby/Ruby-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0/</link>
      <guid>http://hanjuren.github.io/2022/01/28/ruby/Ruby-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0/</guid>
      <pubDate>Fri, 28 Jan 2022 08:11:09 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;루비에서-파일-읽기-쓰기&quot;&gt;&lt;a href=&quot;#루비에서-파일-읽기-쓰기&quot; class=&quot;headerlink&quot; title=&quot;루비에서 파일 읽기, 쓰기&quot;&gt;&lt;/a&gt;루비에서 파일 읽기, 쓰기&lt;/h2&gt;&lt;p&gt;루비에서는 파일 및 디텍토리 입출력을 위하여</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="루비에서-파일-읽기-쓰기"><a href="#루비에서-파일-읽기-쓰기" class="headerlink" title="루비에서 파일 읽기, 쓰기"></a>루비에서 파일 읽기, 쓰기</h2><p>루비에서는 파일 및 디텍토리 입출력을 위하여 <strong>File, Dir</strong>클래스를 제공하고 있다.</p><p>###File<br>File 클래스는 다양한 메서드를 통해 파일을 읽고 쓰고 할 수 있으며 다양한 방식으로 활용이 가능하다.<br>회사 프로젝트에서 File 클래스를 주로 사용하게 되었던 부분은 이미지 파일을 읽고 AWS S3에 업로드 할 때 혹은 어드민에서 엑셀 데이터를 활용, 생성하기 위해 주로 사용하였다.  </p><p>File 클래스에 대한 다양한 기능은 문서를 통해 학습하고 필요한 기능을 사용하면 되겠다.  </p><blockquote><p>File Class Docs<br><a href="https://ruby-doc.org/core-2.5.0/File.html">https://ruby-doc.org/core-2.5.0/File.html</a></p></blockquote><p>포스트에서는 사용했던 메서드와 간단한 사용방법에 대해 기록하고자 한다.</p><ol><li>파일 읽기.<br>가장 중요한 읽기이다. 파일을 읽기 위해서는 <strong>File.open, File.new</strong> 이라는 메서드를 사용한다. 사용방법은 간단하며 다음과 같이 실행한다.</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.open(filename, option)</span><br><span class="line">File.new(filename, option)</span><br></pre></td></tr></table></figure><p>new 메서드와 open 메서드의 동작 결과는 동일하게 흘러간다. 하지만 open 메서드를 사용하면 코드 블록을 통한 작업이 가능해진다.</p><p>option 값으로 설정할 수 있는 값은 다음과 같다.</p><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>r</td><td>읽기 전용 모드로 파일을 연다.</td></tr><tr><td>r+</td><td>읽기,쓰기 모드로 파일을 연다.</td></tr><tr><td>w</td><td>쓰기 전용 모드로 파일을 연다. 단 파일이 존재한다면 덮어쓴다. 그리고 파일이 없다면 새로 생성한다.</td></tr><tr><td>w+</td><td>읽기, 쓰기 모드로 파일을 연다. 단 파일이 존재한다면 덮어쓴다. 그리고 파일이 없다면 새로 생성한다.</td></tr><tr><td>a</td><td>쓰기 전용으로 연다. 파일이 존재한다면 파일의 끝을 가르키며 없으면 생성한다.</td></tr><tr><td>a+</td><td>읽기 쓰기 모드로 연다. 파일이 존재한다면 끝을 가르키고 없다면 생성한다.</td></tr></tbody></table><hr><ol start="2"><li>폴더 읽기<br>폴더를 읽기 위해서는 <strong>Dir class</strong>를 활용한다.  </li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dir.new(path)</span><br></pre></td></tr></table></figure><p>방식은 파일 클래스와 동일하다. 주로 디렉토리를 읽고 파일을 생성하거나 내부의 파일들을 활용하기 위해 사용되는 것 같다. </p><p>디렉토리 내부의 특정 파일을 열기위해 사용하게 되었는데 만약 어떤 경로의 내부에 있는 파일 모두 혹은 특정 파일들만 찾기 위해서는 다음과 같이 사용한다.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 이미지 파일만 가져오도록 한다. 확장자는 png파일만</span></span><br><span class="line">Dir.glob(<span class="string">&quot;./tmp/hexo_blog/*.png&quot;</span>) <span class="keyword">do</span> <span class="params">|path|</span></span><br><span class="line">   File.open(path)</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>cdn 링크를 통한 이미지 파일을 실행하기 위해서 두가지 클래스들을 활용하며 느낀점은 파일 읽고 쓰기 간단하다고 생각했지만 막상 자주 사용하지 않다보니 다소 어려움이 있었다.</p></blockquote><p>가장 어려웠던 cdn 링크 이미지 파일 열기…</p><p>고민하고 구글링을 통해 찾아낸 방법…이다.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">image_path = <span class="string">&quot;https://ifh.cc/g/jmG8MF.jpg&quot;</span></span><br><span class="line">filename = image_path.split(<span class="regexp">/[\/]/</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>] <span class="comment"># 파일 이름만 잘라낸다.</span></span><br><span class="line">  stream = URI.open(image_path) <span class="comment"># URI 클래스를 통해 url을 열어준다. 결과값은 strem형식으로 출력이 된다.</span></span><br><span class="line">  File.open(<span class="string">&quot;./tmp/<span class="subst">#&#123;filename&#125;</span>&quot;</span>, <span class="string">&#x27;w+b&#x27;</span>) <span class="keyword">do</span> <span class="params">|file|</span> <span class="comment"># 해당 경로에 파일이 당연히 없으니 w+ 옵션으로 생성하게 될것이다.</span></span><br><span class="line">    stream.respond_to?(<span class="symbol">:read</span>) ? IO.copy_stream(stream, file) : file.write(stream) <span class="comment"># 스트림형식의 파일을 읽던지 생성하게 끔 하여 파일을 실행한다.</span></span><br><span class="line">    img = URI.open(file)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>이런 방식으로 이미지를 실행하고 생성하며 업로드 등의 작업을 수행할 수 있다.</p><p><em>연휴 전 마지막 평일이라 그런가… 정리 퀄리티가 평소에도 막장이였는데.. 오늘은 더 심한것 같다.. 그래도 이번주 야근하면서 얻어낸? 결과 중 한가지를 기록하고자 마음먹고 기록을 하게 되었다는 것에 의미를 부여하자…</em><br><em>다음 포스트는 루비에서 엑셀 쓰기,읽기 관련하여 기록 예약… 요거 참 골때리고 간단하지만 복잡미묘한 그런 작업…</em></p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      
      <comments>http://hanjuren.github.io/2022/01/28/ruby/Ruby-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹스톰, 루비마인 단축키 정리(기록중)</title>
      <link>http://hanjuren.github.io/2022/01/08/%EC%9D%B8%ED%85%94%EB%A6%AC%EC%A0%9C%EC%9D%B4-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%A0%95%EB%A6%AC-%EA%B8%B0%EB%A1%9D%EC%A4%91/</link>
      <guid>http://hanjuren.github.io/2022/01/08/%EC%9D%B8%ED%85%94%EB%A6%AC%EC%A0%9C%EC%9D%B4-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%A0%95%EB%A6%AC-%EA%B8%B0%EB%A1%9D%EC%A4%91/</guid>
      <pubDate>Sat, 08 Jan 2022 13:59:02 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;웹스톰-루비마인-단축키-정리-기록&quot;&gt;&lt;a href=&quot;#웹스톰-루비마인-단축키-정리-기록&quot; class=&quot;headerlink&quot; title=&quot;웹스톰 루비마인 단축키 정리 (기록)&quot;&gt;&lt;/a&gt;웹스톰 루비마인 단축키 정리 (기록)&lt;/h2&gt;&lt;h4 i</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="웹스톰-루비마인-단축키-정리-기록"><a href="#웹스톰-루비마인-단축키-정리-기록" class="headerlink" title="웹스톰 루비마인 단축키 정리 (기록)"></a>웹스톰 루비마인 단축키 정리 (기록)</h2><h4 id="도구창-열기-⌘0-9"><a href="#도구창-열기-⌘0-9" class="headerlink" title="도구창 열기 :⌘0~9"></a>도구창 열기 :<strong>⌘0~9</strong></h4><ul><li>가장자주 쓰게 되는 번호는 프로젝트 폴더 창으로 넘어가는 1번 그리고 커밋 탭인 0번 정도였다. </li></ul><h4 id="터미널-열기-⎇-F12"><a href="#터미널-열기-⎇-F12" class="headerlink" title="터미널 열기 : ⎇ F12"></a>터미널 열기 : <strong>⎇ F12</strong></h4><h4 id="설정-탭-열기-⌘"><a href="#설정-탭-열기-⌘" class="headerlink" title="설정 탭 열기 : ⌘ ,"></a>설정 탭 열기 : <strong>⌘</strong> ,</h4><h4 id="프로젝트-관련-모든-검색-⇧⇧"><a href="#프로젝트-관련-모든-검색-⇧⇧" class="headerlink" title="프로젝트 관련 모든 검색 : ⇧⇧"></a>프로젝트 관련 모든 검색 : <strong>⇧⇧</strong></h4><h4 id="파일-내용-검색-⌘-⇧-F"><a href="#파일-내용-검색-⌘-⇧-F" class="headerlink" title="파일 내용 검색 : ⌘ ⇧ F"></a>파일 내용 검색 : <strong>⌘ ⇧ F</strong></h4><h4 id="최근-파일-조회-⌘-E"><a href="#최근-파일-조회-⌘-E" class="headerlink" title="최근 파일 조회 : ⌘ E"></a>최근 파일 조회 : <strong>⌘ E</strong></h4><h4 id="라인-번호로-이동-⌘-L"><a href="#라인-번호로-이동-⌘-L" class="headerlink" title="라인 번호로 이동 : ⌘ L"></a>라인 번호로 이동 : <strong>⌘ L</strong></h4><h4 id="열려있는-탭-이동-⌘-⇧"><a href="#열려있는-탭-이동-⌘-⇧" class="headerlink" title="열려있는 탭 이동 : ⌘ ⇧ [ , ]"></a>열려있는 탭 이동 : <strong>⌘ ⇧ [ , ]</strong></h4><h4 id="커밋-창-열기-⌘-K"><a href="#커밋-창-열기-⌘-K" class="headerlink" title="커밋 창 열기 : ⌘ K"></a>커밋 창 열기 : <strong>⌘ K</strong></h4><h4 id="코드-줄-변경-이동할-코드-줄에-커서를-두고-⎇-⇧-↑↓"><a href="#코드-줄-변경-이동할-코드-줄에-커서를-두고-⎇-⇧-↑↓" class="headerlink" title="코드 줄 변경 : 이동할 코드 줄에 커서를 두고 ⎇ ⇧ ↑↓"></a>코드 줄 변경 : <strong>이동할 코드 줄에 커서를 두고 ⎇ ⇧ ↑↓</strong></h4><h4 id="라인-전체-복사-⌘-D"><a href="#라인-전체-복사-⌘-D" class="headerlink" title="라인 전체 복사 : ⌘ D"></a>라인 전체 복사 : <strong>⌘ D</strong></h4><h4 id="라인-전체-삭제-⌘-⌫"><a href="#라인-전체-삭제-⌘-⌫" class="headerlink" title="라인 전체 삭제 : ⌘ ⌫"></a>라인 전체 삭제 : <strong>⌘ ⌫</strong></h4><h4 id="단어별-선택-⎇-←→"><a href="#단어별-선택-⎇-←→" class="headerlink" title="단어별 선택 : ⎇ ←→"></a>단어별 선택 : <strong>⎇ ←→</strong></h4><h4 id="단어별-이동-⎇-⇧-←→"><a href="#단어별-이동-⎇-⇧-←→" class="headerlink" title="단어별 이동 : ⎇ ⇧ ←→"></a>단어별 이동 : <strong>⎇ ⇧ ←→</strong></h4><h4 id="오류-발생-영역으로-이동-F2"><a href="#오류-발생-영역으로-이동-F2" class="headerlink" title="오류 발생 영역으로 이동 : F2"></a>오류 발생 영역으로 이동 : F2</h4><h4 id="오류-해결-방법-제안-⎇-↩︎"><a href="#오류-해결-방법-제안-⎇-↩︎" class="headerlink" title="오류 해결 방법 제안 : ⎇ ↩︎"></a>오류 해결 방법 제안 : <strong>⎇ ↩︎</strong></h4><h4 id="라인-합치기-⌘-⇧-J"><a href="#라인-합치기-⌘-⇧-J" class="headerlink" title="라인 합치기 : ⌘ ⇧ J"></a>라인 합치기 : <strong>⌘ ⇧ J</strong></h4><h4 id="현재-파일에서-찾기-⌘-F"><a href="#현재-파일에서-찾기-⌘-F" class="headerlink" title="현재 파일에서 찾기 : ⌘ F"></a>현재 파일에서 찾기 : <strong>⌘ F</strong></h4><h4 id="현재-파일에서-변경하기-⌘-R"><a href="#현재-파일에서-변경하기-⌘-R" class="headerlink" title="현재 파일에서 변경하기 : ⌘ R"></a>현재 파일에서 변경하기 : <strong>⌘ R</strong></h4><h4 id="코드-라인-정렬-⌘-⎇-L"><a href="#코드-라인-정렬-⌘-⎇-L" class="headerlink" title="코드 라인 정렬 : ⌘ ⎇ L"></a>코드 라인 정렬 : <strong>⌘ ⎇ L</strong></h4>]]></content:encoded>
      
      
      
      <category domain="http://hanjuren.github.io/tags/webstorm/">webstorm</category>
      
      <category domain="http://hanjuren.github.io/tags/rubymine/">rubymine</category>
      
      
      <comments>http://hanjuren.github.io/2022/01/08/%EC%9D%B8%ED%85%94%EB%A6%AC%EC%A0%9C%EC%9D%B4-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%A0%95%EB%A6%AC-%EA%B8%B0%EB%A1%9D%EC%A4%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Sequelize Migration</title>
      <link>http://hanjuren.github.io/2022/01/01/sequelize/Sequelize-Migration/</link>
      <guid>http://hanjuren.github.io/2022/01/01/sequelize/Sequelize-Migration/</guid>
      <pubDate>Sat, 01 Jan 2022 06:38:15 GMT</pubDate>
      
      <description>&lt;p&gt;도커를 통해 데이터베이스를 띄우고 express를 실행시켜 연결을 해보았다. MySQL과 연결하여 데이터베이스를 사용하기 위해서 Sequelize를 사용하여 연결까지 성공적으로 연결을 진행하였다.&lt;/p&gt;
&lt;p&gt;기존에 시퀄라이즈를 사용할때는 모델을 모두 정의한 후 데이터베이스를 생성하고 모델의 수정사항이 있을때마다 **Sync({ force: false || true })**옵션을 통해 데이터베이스를 수정하며 진행했다. 물론 혼자 사용하는 데이터베이스고 서비스를 하지 않는 디비여서 이런방식으로 사용해도 무방하지만 실무에서 사용하는 데이터베이스는 많은 데이터가 있고 구조의 변경이 일어날때 마다 데이터를 백업한다던지 새로 덤프 한다는 것은 현실적으로 어려움이 있다.&lt;/p&gt;
&lt;p&gt;이러한 문제점을 보완하기 위해 ORM에서는 마이그레이션 기능을 지원한다. 마이그레이션이란 어떤 운영환경에서 다른 환경으로 환경의 변화를 위해 옮겨지는 작업을 의미한다.&lt;/p&gt;
&lt;h3 id=&quot;데이터베이스-마이그레이션이란&quot;&gt;&lt;a href=&quot;#데이터베이스-마이그레이션이란&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스 마이그레이션이란.&quot;&gt;&lt;/a&gt;데이터베이스 마이그레이션이란.&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;데이터베이스 마이그레이션이란 하나의 데이터베이스를 다른 종류의 데이터베이스로 데이터를 옮기는 경우 혹은 두개의 데이터베이스를 하나의 시스템으로 합치거나 분할 혹은 데이터베이스 모델의 구조적 변경을 진행 하는 모든 과정을 의미한다.&lt;br&gt;&lt;a href=&quot;http://wiki.hash.kr/index.php/%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98&quot;&gt;데이터 베이스 마이그레이션이란?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그렇다면 시퀄라이즈에서 제공하는 Migration 기능에는 어떤 기능이 있을까? 시퀄라이즈에서는 몇가지 명령어를 통해 마이그레이션 기능을 사용할 수 있다고 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>도커를 통해 데이터베이스를 띄우고 express를 실행시켜 연결을 해보았다. MySQL과 연결하여 데이터베이스를 사용하기 위해서 Sequelize를 사용하여 연결까지 성공적으로 연결을 진행하였다.</p><p>기존에 시퀄라이즈를 사용할때는 모델을 모두 정의한 후 데이터베이스를 생성하고 모델의 수정사항이 있을때마다 **Sync({ force: false || true })**옵션을 통해 데이터베이스를 수정하며 진행했다. 물론 혼자 사용하는 데이터베이스고 서비스를 하지 않는 디비여서 이런방식으로 사용해도 무방하지만 실무에서 사용하는 데이터베이스는 많은 데이터가 있고 구조의 변경이 일어날때 마다 데이터를 백업한다던지 새로 덤프 한다는 것은 현실적으로 어려움이 있다.</p><p>이러한 문제점을 보완하기 위해 ORM에서는 마이그레이션 기능을 지원한다. 마이그레이션이란 어떤 운영환경에서 다른 환경으로 환경의 변화를 위해 옮겨지는 작업을 의미한다.</p><h3 id="데이터베이스-마이그레이션이란"><a href="#데이터베이스-마이그레이션이란" class="headerlink" title="데이터베이스 마이그레이션이란."></a>데이터베이스 마이그레이션이란.</h3><blockquote><p>데이터베이스 마이그레이션이란 하나의 데이터베이스를 다른 종류의 데이터베이스로 데이터를 옮기는 경우 혹은 두개의 데이터베이스를 하나의 시스템으로 합치거나 분할 혹은 데이터베이스 모델의 구조적 변경을 진행 하는 모든 과정을 의미한다.<br><a href="http://wiki.hash.kr/index.php/%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98">데이터 베이스 마이그레이션이란?</a></p></blockquote><p>그렇다면 시퀄라이즈에서 제공하는 Migration 기능에는 어떤 기능이 있을까? 시퀄라이즈에서는 몇가지 명령어를 통해 마이그레이션 기능을 사용할 수 있다고 한다.</p><span id="more"></span><h3 id="Sequelize-Migration"><a href="#Sequelize-Migration" class="headerlink" title="Sequelize Migration"></a>Sequelize Migration</h3><p>시퀄라이즈 마이그레이션 기능을 사용하기 위해서는 먼저 <em>sequelize-cli</em> 패키지를 설치해야한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sequelize-cli </span><br></pre></td></tr></table></figure><p>기존에 시퀄라이즈를 연결했으므로 초기 세팅 과정은 넘어가도록 하고 초기 세팅 과정은 공식문서를 통해 확인이 가능하다.</p><ol><li>Create Model<br>마이그레이션을 통해 모델을 생성하는 과정이다. **명령어는 sequelize-cli model:generate –name ${modelName} –attributes ${columnName:type}**을 통해 생성이 가능하다.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize-cli model:generate --name User --attributes nick_name:string</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 models 디렉토리에 user.js migrations 디렉토리에 시간-create-user.js 형식의 파일이 생성이 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/user.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Model &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">associate</span>(<span class="params">models</span>)</span> &#123;</span><br><span class="line">      User.hasMany(models.Post, &#123;</span><br><span class="line">        <span class="attr">as</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">        <span class="attr">foreignkey</span>: <span class="string">&#x27;user_id&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  User.init(&#123;</span><br><span class="line">    <span class="attr">nick_name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: DataTypes.STRING,</span><br><span class="line">      <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    sequelize,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="attr">tableName</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">underscored</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">charset</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    <span class="attr">coolate</span>: <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>User.init 내부에는 명령어 실행 시 –attributes에 지정했던 컬럼과 타입이 지정되며 추가적으로 컬럼을 생성하려면 파일 내부에서 직접 컬럼을 추가해주면 된다.</p><p>동일한 방식으로 유저 모델과 게시글 모델 마이그레이션 파일을 생성해주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/post.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Model &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">associate</span>(<span class="params">models</span>)</span> &#123;</span><br><span class="line">      Post.belongsTo(models.User, &#123;</span><br><span class="line">        <span class="attr">as</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">foreignkey</span>: <span class="string">&#x27;user_id&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  Post.init(&#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: DataTypes.STRING,</span><br><span class="line">      <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: DataTypes.STRING,</span><br><span class="line">      <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_id</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: DataTypes.INTEGER,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    sequelize,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&#x27;Post&#x27;</span>,</span><br><span class="line">    <span class="attr">tableName</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">    <span class="attr">underscored</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">charset</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    <span class="attr">coolate</span>: <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> Post;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>두개의 모델 파일이 생성되고 내부에 추가할 컬럼을 입력하며 테이블 생성시 설정할 옵션들을 지정해주면 옵션에 맞게 테이블이 생성이 된다.</p><p>또한 유저와 게시글의 1:N 관계를 지정하기 위해 hasMany, belongsTo 옵션을 통해 관계를 지정해주었다.</p><p>모델 파일이 성공적으로 생성이 되었으니 마이그레이션 스크립트를 확인해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// migrations/20211231045301-create-user.js</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.createTable(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">primaryKey</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.INTEGER</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">nick_name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">created_at</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.DATE</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">updated_at</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.DATE</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.dropTable(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// migrations/20211231045301-create-post.js</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.createTable(<span class="string">&#x27;posts&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">primaryKey</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.INTEGER</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">content</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">created_at</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.DATE,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">updated_at</span>: &#123;</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">type</span>: Sequelize.DATE,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">user_id</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: Sequelize.INTEGER,</span><br><span class="line">        <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">references</span>: &#123;</span><br><span class="line">          <span class="attr">model</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.dropTable(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>마이그레이션 파일은 up down 메서드로 구성되며 up은 마이그레이션 실행시 동작하고 down은 실패시 동작할 명령이다. 다양한 옵션과 명령들은 문서를 통해 확인이 가능하다.<br><a href="https://sequelize.org/master/manual/migrations.html">sequelize migrations docs</a></p><p>모델을 생성하기 위해 up 내부에 createTable 메서드를 사용하고 내부에는 모델 파일과 동일하게 컬럼을 입력해야하며 create_at, updated_at 컬럼은 자동으로 생성되는 컬럼이므로 모델 파일에 정의해줄 필요는 없다.</p><p>모델 파일과 마이그레이션 파일을 생성했다면 이제 마이그레이션을 실행해주면 된다.</p><p>실행하기 위한 명령어는 <strong>sequelizee-cli db:migrate</strong> 이며 기본적으로는 env=development 으로 마이그레이션이 실행되니 production환경이나 test환경이라면 env 옵션값을 입력해주면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@0e9dcef32c40:/usr/src/app# sequelize-cli db:migrate         </span><br><span class="line"></span><br><span class="line">Sequelize CLI [Node: 12.22.8, CLI: 6.3.0, ORM: 6.12.0]</span><br><span class="line"></span><br><span class="line">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class="line">Using environment &quot;development&quot;.</span><br><span class="line">== 20211231045323-create-user: migrating =======</span><br><span class="line">== 20211231045323-create-user: migrated (0.024s)</span><br><span class="line"></span><br><span class="line">== 20211231045909-create-post: migrating =======</span><br><span class="line">== 20211231045909-create-post: migrated (0.008s)</span><br></pre></td></tr></table></figure><p>두개의 마이그레이션 파일이 실행되었고 데이터베이스를 확인해보면 users. posts 테이블이 생성된 것을 확인하면 된다. 도커로 실행중인 mysql을 bash로 접속하여 확인해보자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql docker connection</span></span><br><span class="line">docker exec -it docker-test_mysql_1 bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql connection</span></span><br><span class="line">root@4921e7558de3:/# mysql -U test -p</span><br><span class="line">Enter password: </span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.36 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use <span class="built_in">test</span></span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show tables;</span></span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| SequelizeMeta  |</span><br><span class="line">| posts          |</span><br><span class="line">| users          |</span><br><span class="line">+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> desc users;</span></span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| nick_name  | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| created_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">| updated_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> desc posts;</span></span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| title      | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| content    | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| user_id    | int(11)      | YES  | MUL | NULL    |                |</span><br><span class="line">| created_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">| updated_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>테이블 두개가 생성되었고 모델 파일과 마이그레이션에 정의한 컬럼이 모두 생성되고 외래키 지정까지 정상적으로 등록이 되었다. 이렇게 마이그레이션 실행에 대한 정보는 테이블 목록에서 보이는 SequelizeMeta 테이블에 저장되고 관리된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> SequelizeMeta table info</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from SequelizeMeta;</span></span><br><span class="line">+-------------------------------+</span><br><span class="line">| name                          |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 20211231045323-create-user.js |</span><br><span class="line">| 20211231045909-create-post.js |</span><br><span class="line">+-------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>실행했던 두개의 마이그레이션 정보가 입력이 되어있으며 실행한 스크립트의 이름을 알 수 있다. 이렇게 마이그레이션을 실행했다면 되돌리기 위한 명령어로는 <strong>db:migrate:undo, db:migrate:undo:all</strong>이 있고 특정버전 파일을 입력하면 해당 위치까지 롤백이 가능하다.</p><h3 id="seed-migration"><a href="#seed-migration" class="headerlink" title="seed migration"></a>seed migration</h3><p>테이블을 생성했다면 가상의 데이터도 마이그레이션을 통해 삽입이 가능하다. 마이그레이션 파일을 생성하기 위해서 <strong>seed:migerate –name #{name}</strong> 명령어를 사용하면 된다.</p><p>유저 테이블과 게시글 테이블에 하나씩 데이터를 저장해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize-cli seed:migarate --name insert-data</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 seeders 폴더에 seed파일이 생성된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// seeders/202112311653-insert-data.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.bulkInsert(<span class="string">&#x27;users&#x27;</span>, [&#123;</span><br><span class="line">      <span class="attr">nick_name</span>: <span class="string">&#x27;한주련&#x27;</span>,</span><br><span class="line">      <span class="attr">created_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      <span class="attr">updated_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    &#125;], &#123;&#125;);</span><br><span class="line">    <span class="keyword">await</span> queryInterface.bulkInsert(<span class="string">&#x27;posts&#x27;</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;sample title1&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;sample content1&#x27;</span>,</span><br><span class="line">        <span class="attr">user_id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">created_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        <span class="attr">updated_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;sample title2&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;sample content2&#x27;</span>,</span><br><span class="line">        <span class="attr">user_id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">created_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        <span class="attr">updated_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add commands to revert seed here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Example:</span></span><br><span class="line"><span class="comment">     * await queryInterface.bulkDelete(&#x27;People&#x27;, null, &#123;&#125;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>테이블 생성 마이그레이션 파일과 동일한 구조로 생성이 되며 간단하게 유저테이블에 데이터를 넣고 게시글 테이블에도 글 하나를 입력하였다. 해당 마이그레이션을 실행하기 위한 과정은 다음과 같다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@0e9dcef32c40:/usr/src/app# sequelize-cli db:seed:all     </span><br><span class="line"></span><br><span class="line">Sequelize CLI [Node: 12.22.8, CLI: 6.3.0, ORM: 6.12.0]</span><br><span class="line"></span><br><span class="line">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class="line">Using environment &quot;development&quot;.</span><br><span class="line">== 20211231051943-insert_user_sample: migrating =======</span><br><span class="line">== 20211231051943-insert_user_sample: migrated (0.019s)</span><br></pre></td></tr></table></figure><p><strong>sequelize-cli db:seed:all</strong> 명령어를 통해서 데이터를 저장하면 데이터베이스에는 새로운 데이터가 저장 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from users;</span></span><br><span class="line">+----+-----------+---------------------+---------------------+</span><br><span class="line">| id | nick_name | created_at          | updated_at          |</span><br><span class="line">+----+-----------+---------------------+---------------------+</span><br><span class="line">|  1 | 한주련 | 2021-12-31 08:13:09 | 2021-12-31 08:13:09 |</span><br><span class="line">+----+-----------+---------------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from posts;</span></span><br><span class="line">+----+---------------+-----------------+---------+---------------------+---------------------+</span><br><span class="line">| id | title         | content         | user_id | created_at          | updated_at          |</span><br><span class="line">+----+---------------+-----------------+---------+---------------------+---------------------+</span><br><span class="line">|  1 | sample title1 | sample content1 |       1 | 2021-12-31 08:13:09 | 2021-12-31 08:13:09 |</span><br><span class="line">|  2 | sample title2 | sample content2 |       1 | 2021-12-31 08:13:09 | 2021-12-31 08:13:09 |</span><br><span class="line">+----+---------------+-----------------+---------+---------------------+---------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>각각의 데이터가 잘 저장되었다. seed 스크립트는 마이그레이션 파일처럼 따로 기록되고 관리되지 않으므로 여러번 실행하면 실행 횟수 만큼 데이터가 저장되니 유의해야 한다.</p><h3 id="마이그레이션을-통한-모델-수정"><a href="#마이그레이션을-통한-모델-수정" class="headerlink" title="마이그레이션을 통한 모델 수정"></a>마이그레이션을 통한 모델 수정</h3><p>마이그레이션을 통해 테이블을 생성하고 데이터도 넣었으니 모델을 수정하는 방법을 알아보자. 모델 수정 마이그레이션 파일 생성 명령어는 다음과 같다. <strong>sequelzie-cli migration:generate –name ${fileName}</strong></p><p>명령어를 실행하면 migrations 폴더에 파일이 생성되고 구조는 기존과 동일하게 up down 메서드로 구성되어있다.</p><p>users 테이블에 email 컬럼을 추가해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@0e9dcef32c40:/usr/src/app# sequelize-cli migration:generate --name add_column_email_to_users </span><br><span class="line"></span><br><span class="line">Sequelize CLI [Node: 12.22.8, CLI: 6.3.0, ORM: 6.12.0]</span><br><span class="line"></span><br><span class="line">migrations folder at &quot;/usr/src/app/migrations&quot; already exists.</span><br><span class="line">New migration was created at /usr/src/app/migrations/20220101083719-add_column_email_to_users.js .</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// migrations/20220101174356-add_column_email_to_users.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.addColumn(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">type</span>: Sequelize.STRING(<span class="number">50</span>),</span><br><span class="line">      <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.removeColumn(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>실행시 일어날 동작과 실패시 일어날 동작으로 구성하여 작성해주었다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> express container</span></span><br><span class="line">root@0e9dcef32c40:/usr/src/app# sequelize-cli db:migrate</span><br><span class="line"></span><br><span class="line">Sequelize CLI [Node: 12.22.8, CLI: 6.3.0, ORM: 6.12.0]</span><br><span class="line"></span><br><span class="line">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class="line">Using environment &quot;development&quot;.</span><br><span class="line">== 20220101083719-add_column_email_to_users: migrating =======</span><br><span class="line">== 20220101083719-add_column_email_to_users: migrated (0.114s)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql container</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> desc users;</span></span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| nick_name  | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| created_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">| updated_at | datetime     | NO   |     | NULL    |                |</span><br><span class="line">| email      | varchar(50)  | YES  | UNI | NULL    |                |</span><br><span class="line">+------------+--------------+------+-----+---------+----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from users;</span></span><br><span class="line">+----+-----------+---------------------+---------------------+-------+</span><br><span class="line">| id | nick_name | created_at          | updated_at          | email |</span><br><span class="line">+----+-----------+---------------------+---------------------+-------+</span><br><span class="line">|  1 | 한주련 | 2021-12-31 08:13:09 | 2021-12-31 08:13:09 | NULL  |</span><br><span class="line">+----+-----------+---------------------+---------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>email 컬럼이 추가되었다. 이런 방식으로 컬럼의 추가 삭제 옵션 변경 등 다양한 작업을 할 수 있다.</p><hr><p>시퀄라이즈에서 지원하는 마이그레이션 기능을 사용하여 데이터 베이스를 관리하니 기존 모델의 수정사항이 생길 때마다 데이터베이스를 갈아 엎어버렸던 과정이 상당히 비효율 적이였다고 생각이 되었다. 테이블 날리고 다시 생성하고… 또 데이터 넣어주고.. 이러한 과정을 마이그레이션을 통하면 원할하게 이루어진다는 것을 알게 되었고 마이그레이션 기능을 통해 데이터베이스를 관리하면 안전하고 데이터를 보존할 수 있다는 것을 확실하게 알게되었으며 어떤 과정을 ORM에서 마이그레이션을 지원하는지 학습하게 되어 좋았다.</p><p>그리고 대부분의 ORM들이 지원하는 마이그레이션의 기능이 비슷하다는 것을 알게된 시간이기도 했다. 회사에서 루비 온 레일스의 액티브레코드를 사용하며 마이그레이션 기능을 처음 사용해보았고.. 보다 효과적으로 사용하기 위해 공부해야 겠다는 생각이였는데 도커를 공부하면서 하다니.. 겸사겸사 좋은 시간이였다.</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/sequelize/">sequelize</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/sequelize/">sequelize</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      
      <comments>http://hanjuren.github.io/2022/01/01/sequelize/Sequelize-Migration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Doker Mysql(sequelize)</title>
      <link>http://hanjuren.github.io/2021/12/30/docker/Doker-Mysql-sequelize/</link>
      <guid>http://hanjuren.github.io/2021/12/30/docker/Doker-Mysql-sequelize/</guid>
      <pubDate>Thu, 30 Dec 2021 08:56:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Docker-MySQL-Express-연결하기&quot;&gt;&lt;a href=&quot;#Docker-MySQL-Express-연결하기&quot; class=&quot;headerlink&quot; title=&quot;Docker MySQL Express 연결하기&quot;&gt;&lt;/a&gt;Docker MySQL Express 연결하기&lt;/h2&gt;&lt;p&gt;이전 도커로 express앱을 띄운 후 연결 확인 후 데이터 베이스를 도커로 실행 한 후 express와 연결하는 테스트를 진행해보도록 하자.&lt;/p&gt;
&lt;p&gt;먼저 docker-compose.yml에 mysql이미지를 추가해준다.&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;mysql:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;mysql:5.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;--default-authentication-plugin=mysql_native_password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;--character-set-server=utf8mb4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;--collation-server=utf8mb4_unicode_ci&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;restart:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;MYSQL_DATABASE:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Database Name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;MYSQL_USER:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# User name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;MYSQL_PASSWORD:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;MYSQL_ROOT_PASSWORD:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Root Password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;3306:3306&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./data:/var/lib/mysql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./mysql.conf:/etc/mysql/conf.d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;docker-compose up&lt;/strong&gt; 명령 실행 후 mysql이 실행중인 것을 확인하고 docker exec -it #{name} bash 를 통해 mysql로 접근이 가능하다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Docker-MySQL-Express-연결하기"><a href="#Docker-MySQL-Express-연결하기" class="headerlink" title="Docker MySQL Express 연결하기"></a>Docker MySQL Express 연결하기</h2><p>이전 도커로 express앱을 띄운 후 연결 확인 후 데이터 베이스를 도커로 실행 한 후 express와 연결하는 테스트를 진행해보도록 하자.</p><p>먼저 docker-compose.yml에 mysql이미지를 추가해준다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="comment"># Database Name</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="comment"># User name</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="comment"># Password</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="comment"># Root Password</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql.conf:/etc/mysql/conf.d</span></span><br></pre></td></tr></table></figure><p><strong>docker-compose up</strong> 명령 실행 후 mysql이 실행중인 것을 확인하고 docker exec -it #{name} bash 를 통해 mysql로 접근이 가능하다.</p><span id="more"></span><h2 id="express-sequelize-세팅"><a href="#express-sequelize-세팅" class="headerlink" title="express sequelize 세팅"></a>express sequelize 세팅</h2><blockquote><p>npm install sequelize mysql2 sequelize-cli</p></blockquote><blockquote><p>npx sequelize-cli init &lt;- 시퀄라이즈 초기 설정</p></blockquote><h3 id="config-수정"><a href="#config-수정" class="headerlink" title="config 수정"></a>config 수정</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;development&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;1210ss&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span>: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;database_test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span>: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;database_production&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span>: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터 베이스를 환경에 맞게 연결할 수 있는 옵션이 있다. 간단하게 dev 환경 세팅만 진행 후 연결을 해보도록 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">sequelize.sync(&#123; <span class="attr">force</span>: <span class="literal">false</span> &#125;) <span class="comment">// force: false 실행시마다 테이블을 새로 재생성할건가에 대한 옵션 true or false</span></span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;데이터베이스 연결 성공!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>다시 docker의 express를 실행해주면 데이터 베이스 연결이 완료된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ✘ hanjuryeon  ~/docker-test   main ±  docker-compose up docker-test</span><br><span class="line">Starting docker-node-app ... done</span><br><span class="line">Attaching to docker-node-app</span><br><span class="line">docker-node-app | [nodemon] 2.0.15</span><br><span class="line">docker-node-app | [nodemon] to restart at any time, enter `rs`</span><br><span class="line">docker-node-app | [nodemon] watching path(s): *.*</span><br><span class="line">docker-node-app | [nodemon] watching extensions: js,mjs,json</span><br><span class="line">docker-node-app | [nodemon] starting `node app.js`</span><br><span class="line">docker-node-app | express app start</span><br><span class="line">docker-node-app | Executing (default): SELECT 1+1 AS result</span><br><span class="line">docker-node-app | 데이터베이스 연결 성공!</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      
      <comments>http://hanjuren.github.io/2021/12/30/docker/Doker-Mysql-sequelize/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker Node.js nodemon</title>
      <link>http://hanjuren.github.io/2021/12/19/docker/Docker-Node-js-nodemon/</link>
      <guid>http://hanjuren.github.io/2021/12/19/docker/Docker-Node-js-nodemon/</guid>
      <pubDate>Sun, 19 Dec 2021 08:03:31 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;도커를 활용하여 Express를 구동하기 위해 이전 포스팅을 통해 기본적인 앱을 띄워 보았다. 도커를 통해 express를 실행하였지만 코드의 수정이 있을 때 마다 빌드를 다시 해주어야 하는 문제점이 있었다.&lt;br&gt;node.js에서는 nodemo</description>
        
      
      
      
      <content:encoded><![CDATA[<p>도커를 활용하여 Express를 구동하기 위해 이전 포스팅을 통해 기본적인 앱을 띄워 보았다. 도커를 통해 express를 실행하였지만 코드의 수정이 있을 때 마다 빌드를 다시 해주어야 하는 문제점이 있었다.<br>node.js에서는 nodemon이라는 모듈을 사용하여 개발환경에서 코드의 변경사항이 감지되었을때 자동으로 코드의 반영사항을 포함하기 위해 서버를 재시동 해주며 개발을 진행한다.  </p><p>도커를 통해 띄운 express를 로컬에서 작업 후 변경사항을 반영해주기 위해서는 도커의 작업 디렉토리와 로컬 작업 디렉토리를 볼륨 연결 설정을 통해 연결해주고 nodemon으로 express를 구동해주면 된다.</p><ol><li>docker-compose.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">1210ss</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">1210ss</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql.conf:/etc/mysql/conf.d</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">docker-test:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">PORT:</span> <span class="string">&quot;4000&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker-node-app</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-node-app</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/usr/src/app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/src/app/node_modules</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1210:4000&quot;</span></span><br></pre></td></tr></table></figure>docker-compose.yml 파일을 통해 여러 컨테이너를 한번에 관리해주는 방식으로 하나의 서비스를 위해 실행하거나 존재해야하는 이미지들을 한 파일을 통해 정의하는 방식이다.</li></ol><p>mysql은 이 후 사용할 예정이므로 넘어가도록 하고 volumes옵션이 중요한 부분이다.</p><p>volumes은 다음과 같이 작성해 주면된다. &lt;로컬 작업 디렉토리&gt;:&lt;도커 컨테이너 디렉토리&gt; 이것은 로컬 디렉토리와 도커의 디렉토리를 연결하겠다는 의미로 코드의 변경이나 생성 삭제와 같은 작업의 결과를 공유해준다.</p><p>이 후 nodemon을 통해 express 를 실행하고 로컬에서 작업 후 변경사항이 생기게 되면 도커에서 실행중인 express가 재시동 되며 수정 사항을 반영하게 된다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> PORT</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . 은 현재 디렉토리의 모든것을 /usr/src/app으로 복사한다는 의미다.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g nodemon</span></span><br><span class="line"><span class="comment"># Bundle app source</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $PORT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 도커에서 nodemon을 실행하기 위해 필요한 옵션</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;nodemon&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;app.js&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>컨테이너를 다시 빌드 후 접속하고 코드를 수정하면 변경사항이 자동으로 반영되는 모습을 확인 할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      
      <comments>http://hanjuren.github.io/2021/12/19/docker/Docker-Node-js-nodemon/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker 개발환경 세팅하기</title>
      <link>http://hanjuren.github.io/2021/12/05/docker/Docker-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</link>
      <guid>http://hanjuren.github.io/2021/12/05/docker/Docker-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 05 Dec 2021 07:04:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Docker-개발-환경-구축&quot;&gt;&lt;a href=&quot;#Docker-개발-환경-구축&quot; class=&quot;headerlink&quot; title=&quot;Docker 개발 환경 구축&quot;&gt;&lt;/a&gt;Docker 개발 환경 구축&lt;/h2&gt;&lt;p&gt;회사에서 처음 클론 받은 레포지토리의 개발 환경 구축을 위해 도커환경을 구축하며 사용하던 명령어들과 도커를 이용하여 프로젝트 환경을 세팅하는 기본적인 것들에 대해서 기록하고자 글을 남깁니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ifh.cc/g/J2xbO0.png,&quot; title=&quot;도커 로고&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Docker-개발-환경-구축"><a href="#Docker-개발-환경-구축" class="headerlink" title="Docker 개발 환경 구축"></a>Docker 개발 환경 구축</h2><p>회사에서 처음 클론 받은 레포지토리의 개발 환경 구축을 위해 도커환경을 구축하며 사용하던 명령어들과 도커를 이용하여 프로젝트 환경을 세팅하는 기본적인 것들에 대해서 기록하고자 글을 남깁니다.</p><p><img src="https://ifh.cc/g/J2xbO0.png," title="도커 로고"></p><span id="more"></span><h3 id="도커란"><a href="#도커란" class="headerlink" title="도커란.."></a>도커란..</h3><p>도커는 <strong>컨테이너 기반으로 작동하는 오픈소스 가상화 플랫폼</strong>이다.</p><p>도커에서 말하는 컨테이너란 다향한 프로그램과 실행환경을 컨테이너 단위로 추상화하여 동일한 인터페이스를 제공하고 프로그램의 배포 및 관리를 단순하게 작업할 수 있도록 도와준다.<br>백엔드 서버 프로그램이나 데이터 조회를 위한 데이터베이스 서버 등 서비스 운영에 필요한 모든 것을 컨테이너로 추상화하여 사용이 가능하다.</p><p>도커를 운용하며 가장 중요한것 중 하나인 <strong>컨테이너</strong>는 독자적으로 격리된 공간에서 프로세스가 동작하는 방식으로 작동한다. 기존 가상화 서비스는 주로 OS를 가상화하여 사용했는데<br>흔히 VMware, VitrualBox같은 가상머신을 활용하여 사용자 OS위에 새로운 OS를 씌워 사용하는 방식인데 이는 매우 무거울 뿐만아니라 느리다는 단점이 존재한다.<br>도커는 이러한 단점에서 자유로우며 편리함을 제공한다.</p><p><strong>이미지</strong><br>컨테이너 실행에 필요한 설정값 등을 포함하고 있는 것이며 도커에서 제공하며 본인이 원하는 버전의 서비스 이미지를 사용한다면 상태값이 변하는 일이 없다.  </p><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법."></a>사용법.</h3><p>기본적인 이론시간은 거두절미하고 (사실 이론은 알면 좋지만? 몰라도 된다고 생각함.. 어치피 쓰다보면 아니까?) 그냥 바로 하나 만들어보자.</p><p>계획은 이렇다 Node.js기반으로 그냥 비어있는 express앱에서 간단한 crud가 가능한 정도의 express앱을 만들자. 회사에서 만들어져있는 도커 파일을 보면서<br>처음보고 이게 뭔가… 싶었지만 조금 노가다하고 하나하나 공부하는 맛이 있었다. 서비스를 위한 프로젝트는 아니니 간단하게 사용해보려 한다.</p><ol><li>Dockerfile 생성.<br>먼저 간단하게 도커파일을 생성 후 express앱을 띄워보는 테스트를 진행하자. 데이터베이스 연결은 나중에 작업하는걸로 하고 진행해보도록 하자.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 어떤 환경에서 실행 할지 명시한다. 수많은 버전이 있다.</span><br><span class="line">FROM node:12</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/app/src</span><br><span class="line"></span><br><span class="line"># . 은 현재 디렉토리의 모든것을 /usr/src/app으로 복사한다는 의미다.</span><br><span class="line">COPY . /usr/app/src</span><br><span class="line"></span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><ol start="2"><li>app.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span> ::: express app start`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;docker-node-app-test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hanjuren&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;axios&quot;</span>: <span class="string">&quot;^0.24.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;xlsx&quot;</span>: <span class="string">&quot;^0.17.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런식으로 파일을 간단하게 생성해준 후 먼저 도커 이미지를 만들어준다.</p><blockquote><p>docker build –tag=docker-node-app-test</p></blockquote><p>build명령어를 통해 이미지를 생성해주고 이미지가 생성되었는지 확인해본다.</p><blockquote><p>docker images</p></blockquote><p>해당 명령어는 도커로 사용중인 이미지 목록들을 보여주며 <strong>tag</strong>에 적었던 이름으로 이미지가 생성되면 정상적으로 생성이 된것이다.</p><p><img src="https://ifh.cc/g/q2SVOx.png," title="도커이미지 목록"></br><br>이미지 생성이 완료되었고 해당 이미지를 실행하면 express가 실행되며 접속이 가능하다. 실행하기 위한 명령어는 다음과 같다.</p><blockquote><p>docker run –name=test -p 4444:3000 docker-node-app-test</p></blockquote><p><strong>name</strong>옵션에 실행할 컨테이너의 이름을 지정해주고 <strong>-p</strong>옵션은 로컬 PC에서 4444 포트로 접속시 도커에서 실행중인 3333포트로 매핑하겠다는 옵션이다. 그리고 싷행하고자 하는 이미지 이름을 나열하여 명령어를 입력하면 실행이 된다.</p><p><img src="https://ifh.cc/g/mDcDCX.png," title="도커 실행 후 앱 작동화면"></br></p><p>정상적으로 3000포트에서 실행중인 express에 접근하여 작동하는 것이 확인되었다.  </p><p>다음은 데이터베이스 이미지와 함께 실행하며 express에서 mysql을 같이 사용하며 CRUD작업을 진행해보자.</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/categories/Docker/">Docker</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Nodejs/">Nodejs</category>
      
      <category domain="http://hanjuren.github.io/tags/Docker/">Docker</category>
      
      
      <comments>http://hanjuren.github.io/2021/12/05/docker/Docker-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>루비 시작하기</title>
      <link>http://hanjuren.github.io/2021/11/23/ruby/%EB%A3%A8%EB%B9%84-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
      <guid>http://hanjuren.github.io/2021/11/23/ruby/%EB%A3%A8%EB%B9%84-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 23 Nov 2021 06:07:54 GMT</pubDate>
      
      <description>&lt;p&gt;자바스크립트 공부를 하며 Node.js 백엔드 개발을 경험해오며 개발자로 성장하기 위해 달려왔다. 면접을 보며 입사하기로 하게 된 기업에서 자바스크립트 스택을 보고 지원했는데 루비 온 레일스를 사용하는 기업이였고 그에 따라 새로운 언어를 배워야 하는 상황이다. 학교에서 자바를 잠깐 배운것 외에는 자바스크립트 외의 언어를 경험해보지 못했는데 새로운 언어와 프레임워크를 경험하게 되어 좋은 경험이 될것 같다는 생각이 든다.😂&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanjuren/RubyGuide&quot;&gt;📩 Ruby Git Repo&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://ifh.cc/g/jmG8MF.jpg&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;루비는-어떤-언어인가&quot;&gt;&lt;a href=&quot;#루비는-어떤-언어인가&quot; class=&quot;headerlink&quot; title=&quot;루비는 어떤 언어인가?&quot;&gt;&lt;/a&gt;루비는 어떤 언어인가?&lt;/h2&gt;&lt;p&gt;루비를 공부 해봐야겠다고 생각한 후 루비는 어떤 언어인가를 가장 먼저 알아 보게 되었다. 루비 홈페이지를 찾아보니 루비에 대해 다음과 같이 설명해 주고 있었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;루비는 순수 객체 지향 언어이다.&lt;/li&gt;
&lt;li&gt;루비의 모든 것은 객체로 분류된다.&lt;/li&gt;
&lt;li&gt;루비는 유연한 언어이다.&lt;/li&gt;
&lt;li&gt;다른 객체 지향 언어와 달리 의도적인 단일 상속만을 제공한다. 대신 모듈 기능을 이용하여 필요한 메서드를 사용할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;루비는 모든 것을 객체로 분류한다는 특징이 가장 생소하지만 흥미롭게 다가왔다. 자바스크립트 처럼 원시타입과 참조타입을 분류하지 않고 모든것을 객체로 분류한다는 것이 새로운 언어를 배우기 시작하는 단계에서 흥미를 불러와 주었다.&lt;/p&gt;
&lt;h2 id=&quot;그렇다면-왜-루비인가&quot;&gt;&lt;a href=&quot;#그렇다면-왜-루비인가&quot; class=&quot;headerlink&quot; title=&quot;그렇다면 왜 루비인가&quot;&gt;&lt;/a&gt;그렇다면 왜 루비인가&lt;/h2&gt;&lt;p&gt;왜 루비를 사용하는지 궁금했다. 웹개발이라 하면 자바스크립트, 파이썬, 자바 3가지를 생각하고 루비라는 언어를 들어만 봤지 실질적으로 접하는 기회가 없었기 때문이다.&lt;br&gt;루비를 사용하여 웹 개발을 진행 할 때 루비 온 레일스라는 프레임워크를 사용한다고 한다.&lt;br&gt;루비를 사용하는 가장 보편적인 이유는 쉽고 개발 생산성이 빠르다. 라고 많이 얘기를 하는 것 같다. 아직 루비 기본 문법을 보며 따라하는 단계에서는 느끼지 못했지만&lt;br&gt;Express를 사용하여 개발을 할때의 장점과 비슷한 느낌이지 않을까 넘겨짚어 생각하게 된다. 왜 루비를 사용하는지 회사에 물어보면 그럴듯한 답변이 올지 궁금한데 사실 못 물어 보겠다….&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바스크립트 공부를 하며 Node.js 백엔드 개발을 경험해오며 개발자로 성장하기 위해 달려왔다. 면접을 보며 입사하기로 하게 된 기업에서 자바스크립트 스택을 보고 지원했는데 루비 온 레일스를 사용하는 기업이였고 그에 따라 새로운 언어를 배워야 하는 상황이다. 학교에서 자바를 잠깐 배운것 외에는 자바스크립트 외의 언어를 경험해보지 못했는데 새로운 언어와 프레임워크를 경험하게 되어 좋은 경험이 될것 같다는 생각이 든다.😂</p><p><a href="https://github.com/hanjuren/RubyGuide">📩 Ruby Git Repo</a></p><p align="center"><img src="https://ifh.cc/g/jmG8MF.jpg"></p><h2 id="루비는-어떤-언어인가"><a href="#루비는-어떤-언어인가" class="headerlink" title="루비는 어떤 언어인가?"></a>루비는 어떤 언어인가?</h2><p>루비를 공부 해봐야겠다고 생각한 후 루비는 어떤 언어인가를 가장 먼저 알아 보게 되었다. 루비 홈페이지를 찾아보니 루비에 대해 다음과 같이 설명해 주고 있었다.</p><ol><li>루비는 순수 객체 지향 언어이다.</li><li>루비의 모든 것은 객체로 분류된다.</li><li>루비는 유연한 언어이다.</li><li>다른 객체 지향 언어와 달리 의도적인 단일 상속만을 제공한다. 대신 모듈 기능을 이용하여 필요한 메서드를 사용할 수 있다.</li></ol><p>루비는 모든 것을 객체로 분류한다는 특징이 가장 생소하지만 흥미롭게 다가왔다. 자바스크립트 처럼 원시타입과 참조타입을 분류하지 않고 모든것을 객체로 분류한다는 것이 새로운 언어를 배우기 시작하는 단계에서 흥미를 불러와 주었다.</p><h2 id="그렇다면-왜-루비인가"><a href="#그렇다면-왜-루비인가" class="headerlink" title="그렇다면 왜 루비인가"></a>그렇다면 왜 루비인가</h2><p>왜 루비를 사용하는지 궁금했다. 웹개발이라 하면 자바스크립트, 파이썬, 자바 3가지를 생각하고 루비라는 언어를 들어만 봤지 실질적으로 접하는 기회가 없었기 때문이다.<br>루비를 사용하여 웹 개발을 진행 할 때 루비 온 레일스라는 프레임워크를 사용한다고 한다.<br>루비를 사용하는 가장 보편적인 이유는 쉽고 개발 생산성이 빠르다. 라고 많이 얘기를 하는 것 같다. 아직 루비 기본 문법을 보며 따라하는 단계에서는 느끼지 못했지만<br>Express를 사용하여 개발을 할때의 장점과 비슷한 느낌이지 않을까 넘겨짚어 생각하게 된다. 왜 루비를 사용하는지 회사에 물어보면 그럴듯한 답변이 올지 궁금한데 사실 못 물어 보겠다….</p><span id="more"></span><p><strong>루비, 루비 온 레일스</strong>를 사용하면 다음과 같은 장점이 있다고 한다.</p><ol><li>배우기 쉽다<blockquote><p>순수 객체 지향언어로 객체에 대한 이해를 한다면 코드가 사람의 언어와 가깝게 설계되어 간단하여 배우기 쉽다는 장점이 있다.</p></blockquote></li><li>MVC 모델이 거의 대부분 구성되어있다.<blockquote><p>레일스는 추가적인 작업 없이도 대부분의 MVC모델 구현이 되어있어 편리하다.</p></blockquote></li><li>확장성, 이식성이 높다.<blockquote><p>시스템의 용량을 변경하거나 여러 OS에서 사용하게 되어도 추가 작업없이 사용이 가능하며(물론 Ruby를 지원하는 OS..) 다른언어로 개발된 라이브러리를 루비 위에서 쉽게 구현할 수 있다는 장점이 있다.</p></blockquote></li></ol><h2 id="그럼-어떤-단점이-있나"><a href="#그럼-어떤-단점이-있나" class="headerlink" title="그럼 어떤 단점이 있나"></a>그럼 어떤 단점이 있나</h2><p>가장 많이 보이는 단점은 실행속도가 느리다는 것이였다. 따라서 대규모 협업 프로젝트에서는 사용하기 어려운 점이 있다고 한다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론?"></a>결론?</h2><p>빠른 생산성으로 개발이 가능하지만 대규모 프로젝트에서는 사용하기 어려운 부분이 있다는 것이 전체적인 의견인 것 같다. 정확한 이유는 직접 개발하다보면 느낄 수 있지 않을까 생각중이다.</p><h2 id="루비를-설치하고-실행해보자"><a href="#루비를-설치하고-실행해보자" class="headerlink" title="루비를 설치하고 실행해보자."></a>루비를 설치하고 실행해보자.</h2><p>루비 설치는 루비 홈페이지에서 현재 사용중인 OS에 맞게 설치하면 된다.<br>이후 터미널을 실행하고 루비가 설치 되었는지 간단한 명령어를 실행해서 테스트해보자.</p><ol><li><p>Ruby 설치 후 버전 확인 =&gt; <em>ruby -v</em><br><img src="https://ifh.cc/g/35SIrZ.png," title="루비 설치 버전 확인하기"></br></p></li><li><p>언어 공부 할때 가장 먼저 해야하는 “Hello World”출력해보기👀</p></li></ol><p><em>irb</em> 명령어를 실행해서 루비 환경 실행 후 문자열을 반환해주는 <em>puts</em> 명령어를 실행해서 “Hello World”를 출력하면 된다.<br><img src="https://ifh.cc/g/kCRKV2.png," title="hello world"></br><br>실행해보면 <em>nil</em>이 나오는데 <em>nil</em>은 <em>puts</em>에서 항상 반환하는 값이라고 한다. 또한 <em>nil</em>은 <em>null</em>을 의미한다. 이런 사소한 차이가 참 헷갈린다.. </p><p>계속해서 루비에대해 학습하며 기본을 익혀보자.. 물론 나는 자바스크립트 공부도 더 해야하는데 왠지 새로운게 끌리는 것 같기도 하고 자바스크립트가 그립기도하고..</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Ruby/">Ruby</category>
      
      
      <category domain="http://hanjuren.github.io/tags/Ruby/">Ruby</category>
      
      
      <comments>http://hanjuren.github.io/2021/11/23/ruby/%EB%A3%A8%EB%B9%84-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>javascript-생성자 함수를 사용하여 객체 생성하기</title>
      <link>http://hanjuren.github.io/2021/11/06/js/javascript-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%9D%EC%B2%B4-%EC%83%9D/</link>
      <guid>http://hanjuren.github.io/2021/11/06/js/javascript-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%9D%EC%B2%B4-%EC%83%9D/</guid>
      <pubDate>Sat, 06 Nov 2021 05:54:33 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;생성자-함수에-대한-객체-생성&quot;&gt;&lt;a href=&quot;#생성자-함수에-대한-객체-생성&quot; class=&quot;headerlink&quot; title=&quot;생성자 함수에 대한 객체 생성&quot;&gt;&lt;/a&gt;생성자 함수에 대한 객체 생성&lt;/h2&gt;&lt;p&gt;생성자 함수를 사용하여 객체를 생성 방식에는 Object 생성자 함수를 사용하는 방법이 있다.&lt;/p&gt;
&lt;h3 id=&quot;Object-생성자-함수를-사용하는-방법&quot;&gt;&lt;a href=&quot;#Object-생성자-함수를-사용하는-방법&quot; class=&quot;headerlink&quot; title=&quot;Object 생성자 함수를 사용하는 방법&quot;&gt;&lt;/a&gt;Object 생성자 함수를 사용하는 방법&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;new 연산자와 함께 Object 생성자 함수를 호출하여 빈 객체를 생성한다.&lt;br&gt;이때 객체를 생성하고 프로퍼티나 메서드를 추가하여 객체를 완성시키면 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new Object 함수를 호출하면 빈객체가 생성된다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person); &lt;span class=&quot;comment&quot;&gt;// &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 빈객체에 프로퍼티를 추가한다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.name = &lt;span class=&quot;string&quot;&gt;&amp;#x27;hanjuren&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hello My Name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; name: &amp;#x27;hanjuren&amp;#x27;, getName: f &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.getName()); &lt;span class=&quot;comment&quot;&gt;// Hello My Name is hanjuren&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;생성자 함수에 의해 생성된 객체를 인스턴스라고 부른다.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;생성자 함수의 종류는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;RegExp&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;생성자 함수를 호출하여 객체를 생성하는 것은 객체 리터럴을 사용하여 생성하는 것보다는 비효율적이므로 필요한 상황이 아니라면 바람직 한 생성방식은 아니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="생성자-함수에-대한-객체-생성"><a href="#생성자-함수에-대한-객체-생성" class="headerlink" title="생성자 함수에 대한 객체 생성"></a>생성자 함수에 대한 객체 생성</h2><p>생성자 함수를 사용하여 객체를 생성 방식에는 Object 생성자 함수를 사용하는 방법이 있다.</p><h3 id="Object-생성자-함수를-사용하는-방법"><a href="#Object-생성자-함수를-사용하는-방법" class="headerlink" title="Object 생성자 함수를 사용하는 방법"></a>Object 생성자 함수를 사용하는 방법</h3><blockquote><p>new 연산자와 함께 Object 생성자 함수를 호출하여 빈 객체를 생성한다.<br>이때 객체를 생성하고 프로퍼티나 메서드를 추가하여 객체를 완성시키면 된다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Object 함수를 호출하면 빈객체가 생성된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 빈객체에 프로퍼티를 추가한다.</span></span><br><span class="line">person.name = <span class="string">&#x27;hanjuren&#x27;</span>;</span><br><span class="line">person.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello My Name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;hanjuren&#x27;, getName: f &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// Hello My Name is hanjuren</span></span><br></pre></td></tr></table></figure><p><strong>생성자 함수에 의해 생성된 객체를 인스턴스라고 부른다.</strong>  </p><p>생성자 함수의 종류는 다음과 같다.</p><ol><li>String</li><li>Number</li><li>Boolean</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li><li>Promise</li></ol><p>생성자 함수를 호출하여 객체를 생성하는 것은 객체 리터럴을 사용하여 생성하는 것보다는 비효율적이므로 필요한 상황이 아니라면 바람직 한 생성방식은 아니다.</p><span id="more"></span><hr><h3 id="생성자-함수"><a href="#생성자-함수" class="headerlink" title="생성자 함수"></a>생성자 함수</h3><p>생성자 함수를 사용한 객체 생성 방식의 장점</p><ol><li>동일한 구조를 가진 객체를 여러개 생성할떄 효율 적이다.</li></ol><p>예를 들어 원의 반지름을 가진 객체를 두개 이상 생성해야 할 때 원하는 만큼 객체 리터럴을 사용하여 하나하나 생성을 해주어야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circle1 = &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="function"><span class="title">getDiameter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle2 = &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="function"><span class="title">getDiameter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 객체의 반지름은 5와 10으로 각각 다른 값을 가지지만 지름을 반환하는 메서드는 동일한 내용을 포함한다.<br>동일한 메서드나 구조를 가진 객체를 다수 생성할 때 생성자 함수를 통해 객체를 생성하는 것은 효율적인 방식으로 작동하게 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 동일한 구조를 가진 객체를 생성자 함수로 여러개 생성하기</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.getDiameter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> Circle(<span class="number">5</span>); <span class="comment">// 반지름이 5인 객체를 생성</span></span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> Circle(<span class="number">10</span>); <span class="comment">// 반지름이 10인 객체를 생성</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(circle1); <span class="comment">// Circle &#123; radius: 5, getDiameter: [Function (anonymous)] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(circle2); <span class="comment">// Circle &#123; radius: 10, getDiameter: [Function (anonymous)] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(circle1.getDiameter()); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(circle2.getDiameter()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><hr><h3 id="내부-메서드-Call-Construct"><a href="#내부-메서드-Call-Construct" class="headerlink" title="내부 메서드 [[Call]], [[Construct]]"></a>내부 메서드 [[Call]], [[Construct]]</h3><p>함수 객체는 일반 객체가 가지고 있는 내부슬롯, 내부 메서드를 모두 가지고 있기 때문에 일반 객체와 동일하게 작동이 가능하다.<br>하지만 객체는 호출이 불가능 하고 함수는 호출이 가능하다. 그 이유는 함수는 함수로서 동작하기 위한 내부 슬롯과 내부 메서드를 가지고 있기 때문이다.</p><p>함수가 동작하기 위한 내부슬롯</p><ol><li>[[Environment]]</li><li>[[FormalParameters]] …</li></ol><p>내부 메서드</p><ol><li>[[Call]]</li><li>[[Construct]]</li></ol><p>함수가 호출되어 동작하기 위해 [[Call]] 내부 메서드를 가진 함수를 <strong>callable</strong>이라 부르며 [[Construct]] 내부 메서드를 가진 함수를 <strong>constructor</strong> 없는 함수를 <strong>non-constructor</strong>이라고 부른다.</p><blockquote><p>constructor 함수 : 생성자 함수로서 호출이 가능한 함수<br>non-constructor 함수 : 생성자 함수로서 호출이 불가능한 함수</p></blockquote><p>constructor와 non-constructor을 구분하는 방식은 자바스크립트 엔진이 함수 정의를 평가하여 구분지어준다.</p><ul><li>constructor : 함수 선언문, 함수 표현식, 클래스</li><li>non-constructor : 화살표 함수, 메서드(Es6 메서드 축약 표현)</li></ul><blockquote><p>constructor</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> joo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> boo = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> foo());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> joo());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> boo.x());</span><br></pre></td></tr></table></figure><blockquote><p>non-constructor</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aoo = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> noo = &#123;</span><br><span class="line">  <span class="function"><span class="title">x</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> aoo()); <span class="comment">// Type Error</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> noo.x()); <span class="comment">// Type Error</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/javascript/">javascript</category>
      
      
      <category domain="http://hanjuren.github.io/tags/javascript/">javascript</category>
      
      
      <comments>http://hanjuren.github.io/2021/11/06/js/javascript-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%9D%EC%B2%B4-%EC%83%9D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>아파트 온도, 습도, 전력 실시간 데이터 관리 프로젝트 마무리하며.</title>
      <link>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0/</link>
      <guid>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0/</guid>
      <pubDate>Tue, 02 Nov 2021 06:14:59 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;아파트-실시간-데이터-관리-프로젝트를-마무리하며-느꼈던점&quot;&gt;&lt;a href=&quot;#아파트-실시간-데이터-관리-프로젝트를-마무리하며-느꼈던점&quot; class=&quot;headerlink&quot; title=&quot;아파트 실시간 데이터 관리 프로젝트를 마무리하며 느꼈던</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="아파트-실시간-데이터-관리-프로젝트를-마무리하며-느꼈던점"><a href="#아파트-실시간-데이터-관리-프로젝트를-마무리하며-느꼈던점" class="headerlink" title="아파트 실시간 데이터 관리 프로젝트를 마무리하며 느꼈던점"></a>아파트 실시간 데이터 관리 프로젝트를 마무리하며 느꼈던점</h3><p>Node.js를 기반으로한 협업을 통해? 사실 현업에 계신 분 2명과 취준생 2명이 모인 스터디라 현업 개발자 분들 께서 많은 정보와 팁을 알려주신 재능기부 현장느낌이였다. 하지마 어디서도 들을 수 없는… 그런 정보들을 얻는 기회였다고 생각한다. 물론 프로젝트를 그분들께 의존하지는 않았다. 기본적인 세팅과 아이디어를 제공해주시고 거의 2명이 만든 그런 느낌이였다.  </p><p>Mqtt라는 통신기법에 대해 처음 알게되었고 어떤 기능을 위해 여러가지 고려하여 다양한 선택을 하는 생각의 폭을 넓힐 수 있는 좋은 경험으로 생각된다. 무턱대고 기능을 위해 내가 아는 것만 활용하여 물론 아는것이 많지도 않다. 하지만 틀에 갖혀서 개발하는 것보다 기능을 위해 많은 것을 생각하고 고려하면 또다른 방향으로도 더 좋은 결과를 낳을 수 있다는 것을 느끼는 프로젝트 였다.  </p><p>또한 과연 내가 백엔드 개발자를 꿈꾸지만 그에 맞는 준비를 하고 있었는가 그냥 무턱대고 코드만 치며 내것이 되었다라고 생각하던 것은 아니였을까 라는 의문을 나에게 던지는 값진 시간이 되었다.  </p><p>좋은 결과물을 위해서는 많은 공부와 시간을 투자할 준비가 되어있어야 한다. 새로운 것에 대한 도전 그리고 알아가기 위해 노력하는 자세 또 그것을 내 것으로 만들 준비 이러한 덕목이 앞으로 개발자가 되기 위해 내가 준비하는 과정에서 가장 중요하지 않을까 라는 생각이 들었던 프로젝트였다. </p><p>지난 프로젝트들을 정리하며 그때 내가 생각했던것을 정리하고 다시 생각을 해보며 그때 생각한 것을 나는 지키고 있는가. 모든 다짐을 지키지는 못했지만 이때 다짐했던 하나의 결과를 위해 고민을 수없이 하고 의문을 가지고 기능 구현에 안주하지 않는 자세를 지금까지 갖고 있었구나 라는 생각을 하게 된다. 어쩌면 프로젝트를 진행하는 과정에서 사용하는 기술, 언어, 모듈에 대한 이해도 모두 중요하지만 이러한 과정에서 나를 발전시킨 것이 아니였을까. 또 아직 더 발전해야 하는 나의 모습을 더욱 앞으로 나아가게 하는 과정이라고 생각된다.</p>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Projects/">Projects</category>
      
      <category domain="http://hanjuren.github.io/categories/Projects/AptManagement/">AptManagement</category>
      
      
      <category domain="http://hanjuren.github.io/tags/express/">express</category>
      
      <category domain="http://hanjuren.github.io/tags/Projects/">Projects</category>
      
      <category domain="http://hanjuren.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>아파트 온도, 습도, 전력 실시간 데이터 관리 프로젝트 Part 2.</title>
      <link>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Part-2/</link>
      <guid>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Part-2/</guid>
      <pubDate>Tue, 02 Nov 2021 05:52:13 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;스케줄러를-통한-이메일-보내기-기능-구현&quot;&gt;&lt;a href=&quot;#스케줄러를-통한-이메일-보내기-기능-구현&quot; class=&quot;headerlink&quot; title=&quot;스케줄러를 통한 이메일 보내기 기능 구현&quot;&gt;&lt;/a&gt;스케줄러를 통한 이메일 보내기 기능 </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="스케줄러를-통한-이메일-보내기-기능-구현"><a href="#스케줄러를-통한-이메일-보내기-기능-구현" class="headerlink" title="스케줄러를 통한 이메일 보내기 기능 구현"></a>스케줄러를 통한 이메일 보내기 기능 구현</h3><p>사용자의 실시간 데이터를 서버로 전송받고 데이터베이스에 저장하여 쌓인 데이터를 연산하여 사용자에게 특정한 일자에 보내도록 하는 기능을 제공하기로 했다.</p><p>가장 먼저 생각한 방식이자 이상적인 방법이였던 카카오톡으로 전송하기는 토이 프로젝트이기에 사업자 번호 등 카카오에서 요구하는 조건에 부딧혀 포기하고 구글 이메일 보내기로 방향을 틀게 되었다.</p><p>구상하는 방식은 이렇다.</p><ol><li>매월 1일 자정에 모든 동 호수의 데이터를 그래프로 그린다.</li><li>각 호수별 사용자이자 입주민이라는 가정하에 그래프 이미지를 이메일로 매월 1일 00시 15분에 발송한다.</li></ol><h3 id="스케줄러-활용"><a href="#스케줄러-활용" class="headerlink" title="스케줄러 활용"></a>스케줄러 활용</h3><p>우리는 <em>node-schedule</em>모듈을 활용하여 스케줄러를 작성하여 메일을 발송하기로 했다.</p><ol><li>그래프 이미지 그리기</li></ol><ul><li>모든 집의 데이터를 각각 그래프로 그려 이미지로 파일로 저장</li></ul><details markdown="1"><summary>그래프 그리기</summary><!--summary 아래 빈칸 공백 두고 내용을 적는공간--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> get_month = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">return</span> today.getMonth() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아파트 단지, 동, 호 일별 데이터 가져오기</span></span><br><span class="line"><span class="keyword">const</span> sensorData = <span class="keyword">async</span> (Complex, Dong, Ho) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> exData = <span class="keyword">await</span> apt_Info.sensorFind(Complex, Dong, Ho);</span><br><span class="line">    <span class="keyword">return</span> exData;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아파트의 모든 단지 동 호 정보 가져오기</span></span><br><span class="line"><span class="keyword">const</span> basename = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> aptInfo = <span class="keyword">await</span> apt_Info.aptFind();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; aptInfo.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 파일 이름 지정  =&gt; ex) 단지 동 호.png</span></span><br><span class="line">        <span class="keyword">let</span> fileName = <span class="string">`<span class="subst">$&#123;aptInfo[i].AptDong.apt_complex&#125;</span><span class="subst">$&#123;aptInfo[i].AptDong.apt_dong&#125;</span><span class="subst">$&#123;aptInfo[i].apt_ho&#125;</span>`</span>; </span><br><span class="line">        <span class="comment">// 단지, 동, 호의 센서 데이터 받아오기.</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> sensorData(aptInfo[i].AptDong.apt_complex, aptInfo[i].AptDong.apt_dong, aptInfo[i].apt_ho);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 차트를 그리기위한 날짜, 데이터 별 배열 분리</span></span><br><span class="line">        <span class="keyword">let</span> dateArray = []; </span><br><span class="line">        <span class="keyword">let</span> humiArray = [];</span><br><span class="line">        <span class="keyword">let</span> tempArray = [];</span><br><span class="line">        <span class="keyword">let</span> wattArray = [];</span><br><span class="line">        data.map(<span class="function">(<span class="params">sensor</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(sensor.dataValues.date);</span><br><span class="line">            dateArray.push(dateAndTime.format(newDate, <span class="string">&#x27;MM-DD&#x27;</span>));</span><br><span class="line">            tempArray.push(sensor.dataValues.humidityAVG);</span><br><span class="line">            humiArray.push(sensor.dataValues.temperatureAVG);</span><br><span class="line">            wattArray.push(sensor.dataValues.electricitySUM);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 차트 그리기 함수로 파일 이름과 데이터 배열 전달</span></span><br><span class="line">        humiChart(fileName, humiArray, dateArray);</span><br><span class="line">        tempChart(fileName, tempArray, dateArray);</span><br><span class="line">        wattChart(fileName, wattArray, dateArray);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;차트 그리기 시작&quot;</span>);</span><br><span class="line">    logger.info(<span class="string">&#x27;create chart&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아파트 모든 세대의 전력 차트 그리기</span></span><br><span class="line"><span class="keyword">const</span> wattChart = <span class="function">(<span class="params">fileName, data, date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filewatt = fileName + <span class="string">&quot;watt.png&quot;</span>;</span><br><span class="line">    saveChart(filewatt, <span class="string">&quot;Watt&quot;</span>, data, date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아파트 모든 세대 온도 차트 그리기</span></span><br><span class="line"><span class="keyword">const</span> tempChart = <span class="function">(<span class="params">fileName, data, date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filetemp = fileName + <span class="string">&quot;temp.png&quot;</span>;</span><br><span class="line">    saveChart(filetemp, <span class="string">&quot;Temp&quot;</span>, data, date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아파트 모든 세대 습도 차트 그리기</span></span><br><span class="line"><span class="keyword">const</span> humiChart = <span class="function">(<span class="params">fileName, data, date</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filehumi = fileName + <span class="string">&quot;humi.png&quot;</span>;</span><br><span class="line">    saveChart(filehumi, <span class="string">&quot;Humi&quot;</span>, data, date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//차트그리기 스케줄러</span></span><br><span class="line"><span class="keyword">const</span> drawChart = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 매달 자정에 파일 생성</span></span><br><span class="line">    <span class="keyword">const</span> jobs = schedule.scheduleJob(<span class="string">&#x27;0 0 01 * *&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        basename();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>이미지 그리기 코드</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ChartJsImage = <span class="built_in">require</span>(<span class="string">&#x27;chartjs-to-image&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chart = <span class="keyword">new</span> ChartJsImage();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> days = <span class="function"><span class="keyword">function</span>(<span class="params">month,year</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>).getDate();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get_Month = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> today.getMonth() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> makeFolder = <span class="function">(<span class="params">dir</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!fs.existsSync(dir)) &#123;</span><br><span class="line">fs.mkdirSync(dir)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saveChart = <span class="keyword">async</span> (filename, type, data, date) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 차트 label 지정</span></span><br><span class="line"><span class="keyword">const</span> labels = date;</span><br><span class="line">    <span class="comment">// 차트 그리기</span></span><br><span class="line">chart.setConfig(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123; <span class="attr">labels</span>: labels, <span class="attr">datasets</span>: [&#123; <span class="attr">label</span>: type, data &#125;] &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 월별 / 데이터별 파일 구분하기</span></span><br><span class="line"><span class="keyword">const</span> folderName = <span class="string">&#x27;./data/&#x27;</span> + (get_Month() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> monthPath = folderName + <span class="string">&#x27;/&#x27;</span> + type;</span><br><span class="line"><span class="comment">// Write file to disk</span></span><br><span class="line">makeFolder(folderName);</span><br><span class="line">    makeFolder(monthPath);</span><br><span class="line"><span class="keyword">await</span> chart.toFile(monthPath + <span class="string">&quot;/&quot;</span> +  filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = saveChart;</span><br></pre></td></tr></table></figure><p>각각의 파일은 월별 / 데이터 종류로 구분되어 저장되고 저장된 이미지를 사용자에게 전송한다.</p></details><ol start="2"><li>이메일 보내기</li></ol><details markdown="1"><summary>이메일 보내기</summary><!--summary 아래 빈칸 공백 두고 내용을 적는공간--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이메일 보내기 스케줄러 시간 지정 </span></span><br><span class="line"><span class="keyword">const</span> mailResult = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userinfo = <span class="keyword">await</span> User.findAll(&#123;</span><br><span class="line">        <span class="attr">attributes</span>: [<span class="string">&#x27;uemail&#x27;</span>, <span class="string">&#x27;apt_ho&#x27;</span>],</span><br><span class="line">        <span class="attr">include</span>: &#123;</span><br><span class="line">            <span class="attr">model</span>: AptHo,</span><br><span class="line">            <span class="attr">include</span>: &#123;</span><br><span class="line">                <span class="attr">model</span>: AptDong,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    userinfo.map(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> emailParam = &#123;</span><br><span class="line">            <span class="attr">toEmail</span>: <span class="string">`<span class="subst">$&#123;user.uemail&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">subject</span>: <span class="string">`<span class="subst">$&#123;get_month() -<span class="number">1</span>&#125;</span>월 사용량입니다.`</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">`<span class="subst">$&#123;get_month() - <span class="number">1</span>&#125;</span>월 사용량입니다.`</span>,</span><br><span class="line">            <span class="comment">// ex)1단지101동101호</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;user.AptHo.AptDong.apt_complex&#125;</span><span class="subst">$&#123;user.AptHo.AptDong.apt_dong&#125;</span><span class="subst">$&#123;user.AptHo.apt_ho&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">month</span>: get_month() - <span class="number">1</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// const rule = new schedule.RecurrenceRule();</span></span><br><span class="line">        <span class="comment">// const m = 50;</span></span><br><span class="line">        <span class="comment">// rule.minute = m;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 매달 1일 0시 15분 이메일 보내기 실행</span></span><br><span class="line">        <span class="keyword">const</span> j = schedule.scheduleJob(<span class="string">&#x27;13 13 02 * *&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// const j = schedule.scheduleJob(rule, async function() &#123;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;send mail&quot;</span>);</span><br><span class="line">            <span class="comment">// await basename();</span></span><br><span class="line">            logger.info(<span class="string">&#x27;send mail&#x27;</span>);</span><br><span class="line">            mailSender.sendGmail(emailParam);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>테스트를 위해 시간을 조정하여 진행하였고 스케줄러 시간 부분만 원하는 시간으로 조정하면 정상적으로 전송이 된다.</p></details><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p><img src="https://ifh.cc/g/8AgDwm.png" title="이메일 결과"> </br></p><hr>]]></content:encoded>
      
      
      <category domain="http://hanjuren.github.io/categories/Projects/">Projects</category>
      
      <category domain="http://hanjuren.github.io/categories/Projects/AptManagement/">AptManagement</category>
      
      
      <category domain="http://hanjuren.github.io/tags/express/">express</category>
      
      <category domain="http://hanjuren.github.io/tags/Projects/">Projects</category>
      
      <category domain="http://hanjuren.github.io/tags/Node-js/">Node.js</category>
      
      
      <comments>http://hanjuren.github.io/2021/11/02/project/apt/%EC%95%84%ED%8C%8C%ED%8A%B8-%EC%98%A8%EB%8F%84-%EC%8A%B5%EB%8F%84-%EC%A0%84%EB%A0%A5-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Part-2/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
